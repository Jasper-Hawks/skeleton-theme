{% doc %}
  @prompt
    Make a mobile friendly collection carousel of all the collections in my shop. Match the styling of the rest of the site

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-collection-carousel-{{ ai_gen_id }} {
    padding: {{ block.settings.section_padding }}px 0;
    background-color: {{ block.settings.background_color }};
  }

  .ai-collection-carousel-container-{{ ai_gen_id }} {
    max-width: {{ settings.max_page_width }};
    margin: 0 auto;
    padding: 0 {{ settings.min_page_margin }}px;
  }

  .ai-collection-carousel-header-{{ ai_gen_id }} {
    text-align: {{ block.settings.text_alignment }};
    margin-bottom: {{ block.settings.spacing_below_title }}px;
  }

  .ai-collection-carousel-title-{{ ai_gen_id }} {
    font-family: {{ settings.type_primary_font.family }}, {{ settings.type_primary_font.fallback_families }};
    font-size: {{ block.settings.title_size }}px;
    color: {{ block.settings.text_color }};
    margin: 0;
    font-weight: 600;
  }

  .ai-collection-carousel-subtitle-{{ ai_gen_id }} {
    font-family: {{ settings.type_primary_font.family }}, {{ settings.type_primary_font.fallback_families }};
    font-size: {{ block.settings.subtitle_size }}px;
    color: {{ block.settings.text_color }};
    margin: 8px 0 0;
    opacity: 0.8;
  }

  .ai-collection-carousel-wrapper-{{ ai_gen_id }} {
    position: relative;
    overflow: hidden;
  }

  .ai-collection-carousel-track-{{ ai_gen_id }} {
    display: flex;
    gap: {{ block.settings.card_spacing }}px;
    transition: transform 0.3s ease;
    padding: 0 {{ settings.min_page_margin }}px;
    margin:0 -{{ settings.min_page_margin }}px;
  }

  .ai-collection-card-{{ ai_gen_id }} {
    flex: 0 0 auto;
    width: {{ block.settings.card_width_mobile }}px;
    text-decoration: none;
    color: inherit;
  }

  .ai-collection-card-image-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: {{ block.settings.image_height }}px;
    border-radius: {{ settings.input_corner_radius }}px;
    overflow: hidden;
    background-color: {{ settings.background_color }};
    margin-bottom: 12px;
  }

  .ai-collection-card-image-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .ai-collection-card-{{ ai_gen_id }}:hover .ai-collection-card-image-{{ ai_gen_id }} {
    transform: scale(1.05);
  }

  .ai-collection-card-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f4f4f4;
  }

  .ai-collection-card-placeholder-{{ ai_gen_id }} svg {
    width: 60%;
    height: 60%;
    opacity: 0.3;
  }

  .ai-collection-card-overlay-{{ ai_gen_id }} {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.6));
    color: white;
    padding: 20px 16px 16px;
    transform: translateY(100%);
    transition: transform 0.3s ease;
  }

  .ai-collection-card-{{ ai_gen_id }}:hover .ai-collection-card-overlay-{{ ai_gen_id }} {
    transform: translateY(0);
  }

  .ai-collection-card-title-{{ ai_gen_id }} {
    font-family: {{ settings.type_primary_font.family }}, {{ settings.type_primary_font.fallback_families }};
    font-size: {{ block.settings.card_title_size }}px;
    font-weight: 600;
    margin: 0;
    color: {{ block.settings.text_color }};
  }

  .ai-collection-card-count-{{ ai_gen_id }} {
    font-family: {{ settings.type_primary_font.family }}, {{ settings.type_primary_font.fallback_families }};
    font-size: {{ block.settings.card_subtitle_size }}px;
    margin: 4px 0 0;
    opacity: 0.7;
    color: {{ block.settings.text_color }};
  }

  .ai-collection-card-overlay-title-{{ ai_gen_id }} {
    font-size: {{ block.settings.card_title_size }}px;
    font-weight: 600;
    margin: 0;
  }

  .ai-collection-card-overlay-count-{{ ai_gen_id }} {
    font-size: {{ block.settings.card_subtitle_size }}px;
    margin: 4px 0 0;
    opacity: 0.9;
  }

  .ai-collection-carousel-navigation-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    gap: 8px;
    margin-top: 24px;
  }

  .ai-collection-carousel-nav-button-{{ ai_gen_id }} {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    border: 1px solid {{ block.settings.text_color }};
    background-color: transparent;
    color: {{ block.settings.text_color }};
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }

  .ai-collection-carousel-nav-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.text_color }};
    color: {{ block.settings.background_color }};
  }

  .ai-collection-carousel-nav-button-{{ ai_gen_id }}:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .ai-collection-carousel-nav-button-{{ ai_gen_id }}:disabled:hover {
    background-color: transparent;
    color: {{ block.settings.text_color }};
  }

  .ai-collection-carousel-empty-state-{{ ai_gen_id }} {
    text-align: center;
    padding: 60px 20px;
    color: {{ block.settings.text_color }};
    opacity: 0.6;
  }

  .ai-collection-carousel-empty-state-{{ ai_gen_id }} svg {
    width: 80px;
    height: 80px;
    margin-bottom: 16px;
    opacity: 0.4;
  }

  @media screen and (min-width: 750px) {
    .ai-collection-card-{{ ai_gen_id }} {
      width: {{ block.settings.card_width_desktop }}px;
    }

    .ai-collection-carousel-track-{{ ai_gen_id }} {
      padding: 0;
      margin: 0;
    }
  }
{% endstyle %}

<collection-carousel-{{ ai_gen_id }}
  class="ai-collection-carousel-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-collection-carousel-container-{{ ai_gen_id }}">
    {% if block.settings.title != blank or block.settings.subtitle != blank %}
      <div class="ai-collection-carousel-header-{{ ai_gen_id }}">
        {% if block.settings.title != blank %}
          <h2 class="ai-collection-carousel-title-{{ ai_gen_id }}">{{ block.settings.title }}</h2>
        {% endif %}
        {% if block.settings.subtitle != blank %}
          <p class="ai-collection-carousel-subtitle-{{ ai_gen_id }}">{{ block.settings.subtitle }}</p>
        {% endif %}
      </div>
    {% endif %}

    {% if collections.size > 0 %}
      <div class="ai-collection-carousel-wrapper-{{ ai_gen_id }}">
        <div class="ai-collection-carousel-track-{{ ai_gen_id }}" data-track>
          {% for collection in collections %}<a href="{{ collection.url }}" class="ai-collection-card-{{ ai_gen_id }}">
              <div class="ai-collection-card-image-wrapper-{{ ai_gen_id }}">
                {% if collection.featured_image %}
                  <img
                    src="{{ collection.featured_image | image_url: width: 400}}"
                    alt="{{ collection.featured_image.alt | escape }}"
                    class="ai-collection-card-image-{{ ai_gen_id }}"
                    loading="lazy"
                    width="400"
                    height="{{ block.settings.image_height }}"
                  >
                {% else %}
                  <div class="ai-collection-card-placeholder-{{ ai_gen_id }}">
                    {{ 'collection-1' | placeholder_svg_tag }}
                  </div>
                {% endif %}
                
                {% if block.settings.show_overlay %}
                  <div class="ai-collection-card-overlay-{{ ai_gen_id }}">
                    <h3 class="ai-collection-card-overlay-title-{{ ai_gen_id }}">{{ collection.title }}</h3>
                    <p class="ai-collection-card-overlay-count-{{ ai_gen_id }}">
                      {{ collection.products_count }}{% if collection.products_count == 1 %}
                        product
                      {% else %}
                        products
                      {% endif %}
                    </p>
                  </div>
                {% endif %}
              </div>
              
              {% unless block.settings.show_overlay %}
                <h3 class="ai-collection-card-title-{{ ai_gen_id }}">{{ collection.title }}</h3>
                <p class="ai-collection-card-count-{{ ai_gen_id }}">
                  {{ collection.products_count }}
                  {% if collection.products_count == 1 %}
                    product
                  {% else %}
                    products
                  {% endif %}
                </p>
              {% endunless %}
            </a>
          {% endfor %}
        </div>
      </div>

      <div class="ai-collection-carousel-navigation-{{ ai_gen_id }}">
        <button
          class="ai-collection-carousel-nav-button-{{ ai_gen_id }}"
          data-prev
          aria-label="Previous collections"
        >
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="15,18 9,12 15,6"></polyline>
          </svg>
        </button>
        <button
          class="ai-collection-carousel-nav-button-{{ ai_gen_id }}"
          data-next
          aria-label="Next collections"
        >
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="9,18 15,12 9,6"></polyline>
          </svg>
        </button>
      </div>
    {% else %}
      <div class="ai-collection-carousel-empty-state-{{ ai_gen_id }}">
        {{ 'collection-1' | placeholder_svg_tag }}<p>No collections found. Create your first collection to get started.</p>
      </div>
    {% endif %}
  </div>
</collection-carousel-{{ ai_gen_id }}>

<script>
  (function() {
    class CollectionCarousel{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentIndex = 0;
        this.itemsToShow = 1;
        this.totalItems = 0;
      }

      connectedCallback() {
        this.track = this.querySelector('[data-track]');
        this.prevButton = this.querySelector('[data-prev]');
        this.nextButton = this.querySelector('[data-next]');
        this.cards = this.querySelectorAll('.ai-collection-card-{{ ai_gen_id }}');

        if (!this.track || this.cards.length === 0) return;

        this.totalItems = this.cards.length;
        this.setupEventListeners();
        this.calculateItemsToShow();
        this.updateNavigation();

        window.addEventListener('resize', () => {
          this.calculateItemsToShow();
          this.updateCarousel();
        });
      }

      setupEventListeners() {
        this.prevButton.addEventListener('click', () => this.goToPrevious());
        this.nextButton.addEventListener('click', () => this.goToNext());

        let startX = 0;
        let currentX = 0;
        let isDragging = false;

        this.track.addEventListener('touchstart', (e) => {
          startX = e.touches[0].clientX;
          isDragging = true;
        });

        this.track.addEventListener('touchmove', (e) => {
          if (!isDragging) return;
          currentX = e.touches[0].clientX;
        });

        this.track.addEventListener('touchend', () => {
          if (!isDragging) return;
          isDragging = false;

          const diff = startX - currentX;
          if (Math.abs(diff) > 50) {
            if (diff > 0) {
              this.goToNext();
            } else {
              this.goToPrevious();
            }
          }
        });
      }

      calculateItemsToShow() {
        const containerWidth = this.track.parentElement.offsetWidth;
        const cardWidth = parseInt('{{ block.settings.card_width_mobile }}');
        const cardWidthDesktop = parseInt('{{ block.settings.card_width_desktop }}');
        const gap = parseInt('{{ block.settings.card_spacing }}');
        if (window.innerWidth >= 750) {
          this.itemsToShow = Math.floor((containerWidth + gap) / (cardWidthDesktop + gap));
        } else {
          this.itemsToShow = Math.floor((containerWidth + gap) / (cardWidth + gap));
        }
        
        this.itemsToShow = Math.max(1, Math.min(this.itemsToShow, this.totalItems));
      }

      goToPrevious() {
        if (this.currentIndex > 0) {
          this.currentIndex--;
          this.updateCarousel();
        }
      }

      goToNext() {
        const maxIndex = Math.max(0, this.totalItems - this.itemsToShow);
        if (this.currentIndex < maxIndex) {
          this.currentIndex++;
          this.updateCarousel();
        }
      }

      updateCarousel() {
        const cardWidth = window.innerWidth >= 750 
          ? parseInt('{{ block.settings.card_width_desktop }}')
          : parseInt('{{ block.settings.card_width_mobile }}');
        const gap = parseInt('{{ block.settings.card_spacing }}');
        const translateX = this.currentIndex * (cardWidth + gap);
        
        this.track.style.transform = `translateX(-${translateX}px)`;
        this.updateNavigation();
      }

      updateNavigation() {
        const maxIndex = Math.max(0, this.totalItems - this.itemsToShow);
        
        this.prevButton.disabled = this.currentIndex === 0;
        this.nextButton.disabled = this.currentIndex >= maxIndex;
      }
    }

    customElements.define('collection-carousel-{{ ai_gen_id }}', CollectionCarousel{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Collection carousel",
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Shop by collection"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Subtitle",
      "default": "Discover our curated collections"
    },
    {
      "type": "select",
      "id": "text_alignment",
      "label": "Text alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "center"
    },
    {
      "type": "checkbox",
      "id": "show_overlay",
      "label": "Show title overlay on hover",
      "default": false
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "card_width_mobile",
      "min": 200,
      "max": 300,
      "step": 10,
      "unit": "px",
      "label": "Card width on mobile",
      "default": 250
    },
    {
      "type": "range",
      "id": "card_width_desktop",
      "min": 250,
      "max": 400,
      "step": 10,
      "unit": "px",
      "label": "Card width on desktop",
      "default": 300
    },
    {
      "type": "range",
      "id": "card_spacing",
      "min": 10,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Card spacing",
      "default": 20
    },
    {
      "type": "range",
      "id": "image_height",
      "min": 150,
      "max": 300,
      "step": 10,
      "unit": "px",
      "label": "Image height",
      "default": 200
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 20,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Section padding",
      "default": 50
    },
    {
      "type": "range",
      "id": "spacing_below_title",
      "min": 10,
      "max": 60,
      "step": 5,
      "unit": "px",
      "label": "Spacing below title",
      "default": 30
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 20,
      "max": 50,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 32
    },
    {
      "type": "range",
      "id": "subtitle_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Subtitle size",
      "default": 16
    },
    {
      "type": "range",
      "id": "card_title_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Card title size",
      "default": 16
    },
    {
      "type": "range",
      "id": "card_subtitle_size",
      "min": 10,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Card subtitle size",
      "default": 14
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#333333"
    }
  ],
  "presets": [
    {
      "name": "Collection carousel"
    }
  ]
}
{% endschema %}