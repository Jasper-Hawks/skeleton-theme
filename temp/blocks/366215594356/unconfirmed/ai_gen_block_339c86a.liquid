{% doc %}
  @prompt
    Related products carousel that uses the data from search and discovery

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-related-products-{{ ai_gen_id }} {
    padding: {{ block.settings.section_padding }}px 0;
    background-color: {{ block.settings.background_color }};
  }

  .ai-related-products-container-{{ ai_gen_id }} {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .ai-related-products-header-{{ ai_gen_id }} {
    text-align: {{ block.settings.heading_alignment }};
    margin-bottom: 32px;
  }

  .ai-related-products-title-{{ ai_gen_id }} {
    font-size: {{ block.settings.heading_size }}px;
    color: {{ block.settings.heading_color }};
    margin: 0;
    font-weight: 600;
  }

  .ai-related-products-carousel-wrapper-{{ ai_gen_id }} {
    position: relative;
    overflow: hidden;
  }

  .ai-related-products-carousel-{{ ai_gen_id }} {
    display: flex;
    gap: {{ block.settings.product_gap }}px;
    transition: transform 0.3s ease;
    scroll-behavior: smooth;
  }

  .ai-related-product-card-{{ ai_gen_id }} {
    flex: 0 0 calc((100% - {{ block.settings.product_gap | times: block.settings.products_per_row | minus: 1 }}px) / {{ block.settings.products_per_row }});
    background-color: {{ block.settings.card_background_color }};
    border-radius: {{ block.settings.card_border_radius }}px;
    overflow: hidden;
    transition: transform 0.2s ease;
  }

  .ai-related-product-card-{{ ai_gen_id }}:hover {
    transform: translateY(-4px);
  }

  .ai-related-product-image-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    aspect-ratio: 1;
    overflow: hidden;
  }

  .ai-related-product-image-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .ai-related-product-card-{{ ai_gen_id }}:hover .ai-related-product-image-{{ ai_gen_id }} {
    transform: scale(1.05);
  }

  .ai-related-product-info-{{ ai_gen_id }} {
    padding: 16px;
  }

  .ai-related-product-title-{{ ai_gen_id }} {
    font-size: {{ block.settings.product_title_size }}px;
    color: {{ block.settings.product_title_color }};
    margin: 0 0 8px;
    font-weight: 500;
    line-height: 1.3;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .ai-related-product-price-{{ ai_gen_id }} {
    font-size: {{ block.settings.product_price_size }}px;
    color: {{ block.settings.product_price_color }};
    font-weight: 600;
  }

  .ai-related-product-compare-price-{{ ai_gen_id }} {
    text-decoration: line-through;
    color: {{ block.settings.compare_price_color }};
    margin-right: 8px;
  }

  .ai-related-products-nav-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: {{ block.settings.nav_button_color }};
    color: {{ block.settings.nav_button_text_color }};
    border: none;
    width: 48px;
    height: 48px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0.8;
    transition: opacity 0.3s ease;
    z-index: 2;
  }

  .ai-related-products-nav-{{ ai_gen_id }}:hover {
    opacity: 1;
  }

  .ai-related-products-nav-{{ ai_gen_id }}:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .ai-related-products-nav-prev-{{ ai_gen_id }} {
    left: -24px;
  }

  .ai-related-products-nav-next-{{ ai_gen_id }} {
    right: -24px;
  }

  .ai-related-products-dots-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    gap: 8px;
    margin-top: 24px;
  }

  .ai-related-products-dot-{{ ai_gen_id }} {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background-color: {{ block.settings.dot_color }};
    opacity: 0.3;
    cursor: pointer;
    transition: opacity 0.3s ease;
  }

  .ai-related-products-dot-{{ ai_gen_id }}.active {
    opacity: 1;
  }

  .ai-related-products-empty-{{ ai_gen_id }} {
    text-align: center;
    padding: 60px 20px;
    color: #666;
  }

  .ai-related-products-empty-title-{{ ai_gen_id }} {
    font-size: 24px;
    margin-bottom: 12px;
    color: #333;
  }

  @media screen and (max-width: 768px) {
    .ai-related-product-card-{{ ai_gen_id }} {
      flex: 0 0 calc((100% - {{ block.settings.product_gap | times: block.settings.products_per_row_mobile | minus: 1 }}px) / {{ block.settings.products_per_row_mobile }});
    }

    .ai-related-products-nav-{{ ai_gen_id }} {
      width: 40px;
      height: 40px;
    }

    .ai-related-products-nav-prev-{{ ai_gen_id }} {
      left: -20px;
    }

    .ai-related-products-nav-next-{{ ai_gen_id }} {
      right: -20px;
    }
  }
{% endstyle %}

<related-products-carousel-{{ ai_gen_id }}
  class="ai-related-products-{{ ai_gen_id }}"
  data-product-id="{{ product.id }}"
  data-products-per-row="{{ block.settings.products_per_row }}"
  data-products-per-row-mobile="{{ block.settings.products_per_row_mobile }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-related-products-container-{{ ai_gen_id }}">
    {% if block.settings.heading != blank %}
      <div class="ai-related-products-header-{{ ai_gen_id }}">
        <h2 class="ai-related-products-title-{{ ai_gen_id }}">{{ block.settings.heading }}</h2>
      </div>
    {% endif %}

    <div class="ai-related-products-carousel-wrapper-{{ ai_gen_id }}">
      <div class="ai-related-products-carousel-{{ ai_gen_id }}" data-carousel>
        <div class="ai-related-products-empty-{{ ai_gen_id }}" data-empty-state>
          <h3 class="ai-related-products-empty-title-{{ ai_gen_id }}">Loading related products...</h3>
          <p>We're finding products you might like based on this item.</p>
        </div>
      </div>

      <button
        class="ai-related-products-nav-{{ ai_gen_id }} ai-related-products-nav-prev-{{ ai_gen_id }}"
        data-nav="prev"
        aria-label="Previous products"
        style="display: none;"
      >
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="15,18 9,12 15,6"></polyline>
        </svg>
      </button>

      <button
        class="ai-related-products-nav-{{ ai_gen_id }} ai-related-products-nav-next-{{ ai_gen_id }}"
        data-nav="next"
        aria-label="Next products"
        style="display: none;"
      >
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="9,18 15,12 9,6"></polyline>
        </svg>
      </button>
    </div>

    <div class="ai-related-products-dots-{{ ai_gen_id }}" data-dots style="display: none;"></div>
  </div>
</related-products-carousel-{{ ai_gen_id }}>

<script>
  (function() {
    class RelatedProductsCarousel{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentSlide = 0;
        this.totalSlides = 0;
        this.productsPerRow = parseInt(this.dataset.productsPerRow) || 4;
        this.productsPerRowMobile = parseInt(this.dataset.productsPerRowMobile) || 2;
        this.productId = this.dataset.productId;
      }

      connectedCallback() {
        this.carousel = this.querySelector('[data-carousel]');
        this.emptyState = this.querySelector('[data-empty-state]');
        this.prevButton = this.querySelector('[data-nav="prev"]');
        this.nextButton = this.querySelector('[data-nav="next"]');
        this.dotsContainer = this.querySelector('[data-dots]');

        this.loadRelatedProducts();
        this.setupEventListeners();
      }

      async loadRelatedProducts() {
        try {
          const response = await fetch(`/recommendations/products.json?product_id=${this.productId}&limit={{ block.settings.max_products }}`);
          const data = await response.json();
          
          if (data.products && data.products.length > 0) {
            this.renderProducts(data.products);
            this.setupCarousel();
          } else {
            this.showEmptyState();
          }
        } catch (error) {
          console.error('Error loading related products:', error);
          this.showEmptyState();
        }
      }

      renderProducts(products) {
        const productsHTML = products.map(product => {
          const price = this.formatMoney(product.price);
          const comparePrice = product.compare_at_price > product.price ? 
            this.formatMoney(product.compare_at_price) : null;

          return `
            <div class="ai-related-product-card-{{ ai_gen_id }}">
              <a href="${product.url}" class="ai-related-product-link-{{ ai_gen_id }}">
                <div class="ai-related-product-image-wrapper-{{ ai_gen_id }}">
                  <img
                    src="${product.featured_image}"
                    alt="${product.title}"
                    class="ai-related-product-image-{{ ai_gen_id }}"
                    loading="lazy"
                    width="300"
                    height="300"
                  >
                </div>
                <div class="ai-related-product-info-{{ ai_gen_id }}">
                  <h3 class="ai-related-product-title-{{ ai_gen_id }}">${product.title}</h3>
                  <div class="ai-related-product-price-{{ ai_gen_id }}">
                    ${comparePrice ? `<span class="ai-related-product-compare-price-{{ ai_gen_id }}">${comparePrice}</span>` : ''}
                    ${price}
                  </div>
                </div>
              </a>
            </div>
          `;
        }).join('');

        this.carousel.innerHTML = productsHTML;
      }

      setupCarousel() {
        const cards = this.carousel.querySelectorAll('.ai-related-product-card-{{ ai_gen_id }}');
        const currentProductsPerRow = window.innerWidth <= 768 ? this.productsPerRowMobile : this.productsPerRow;
        
        if (cards.length <= currentProductsPerRow) {
          return;
        }

        this.totalSlides = Math.ceil(cards.length / currentProductsPerRow);
        this.showNavigation();
        this.createDots();
        this.updateCarousel();
      }

      showNavigation() {
        this.prevButton.style.display = 'flex';
        this.nextButton.style.display = 'flex';
        this.dotsContainer.style.display = 'flex';
      }

      createDots() {
        const dotsHTML = Array.from({ length: this.totalSlides }, (_, i) => 
          `<button class="ai-related-products-dot-{{ ai_gen_id }} ${i === 0 ? 'active' : ''}" data-slide="${i}"></button>`
        ).join('');
        
        this.dotsContainer.innerHTML = dotsHTML;
      }

      updateCarousel() {
        const currentProductsPerRow = window.innerWidth <= 768 ? this.productsPerRowMobile : this.productsPerRow;
        const translateX = -(this.currentSlide * (100 / this.totalSlides));
        
        this.carousel.style.transform = `translateX(${translateX}%)`;
        
        this.prevButton.disabled = this.currentSlide === 0;
        this.nextButton.disabled = this.currentSlide === this.totalSlides - 1;
        
        this.querySelectorAll('.ai-related-products-dot-{{ ai_gen_id }}').forEach((dot, index) => {
          dot.classList.toggle('active', index === this.currentSlide);
        });
      }

      setupEventListeners() {
        this.prevButton.addEventListener('click', () => this.prevSlide());
        this.nextButton.addEventListener('click', () => this.nextSlide());
        
        this.dotsContainer.addEventListener('click', (e) => {
          if (e.target.dataset.slide) {
            this.currentSlide = parseInt(e.target.dataset.slide);
            this.updateCarousel();
          }
        });

        window.addEventListener('resize', () => {
          this.setupCarousel();
        });
      }

      prevSlide() {
        if (this.currentSlide > 0) {
          this.currentSlide--;
          this.updateCarousel();
        }
      }

      nextSlide() {
        if (this.currentSlide < this.totalSlides - 1) {
          this.currentSlide++;
          this.updateCarousel();
        }
      }

      showEmptyState() {
        this.emptyState.innerHTML = `
          <h3 class="ai-related-products-empty-title-{{ ai_gen_id }}">No related products found</h3>
          <p>Check back later for product recommendations.</p>
        `;
      }

      formatMoney(cents) {
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD',
          minimumFractionDigits: 2
        }).format(cents / 100);
      }
    }

    customElements.define('related-products-carousel-{{ ai_gen_id }}', RelatedProductsCarousel{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Related products carousel",
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "You might also like"
    },
    {
      "type": "select",
      "id": "heading_alignment",
      "label": "Heading alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "center"
    },
    {
      "type": "range",
      "id": "max_products",
      "min": 4,
      "max": 20,
      "step": 1,
      "label": "Maximum products to show",
      "default": 12
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "products_per_row",
      "min": 2,
      "max": 6,
      "step": 1,
      "label": "Products per row on desktop",
      "default": 4
    },
    {
      "type": "select",
      "id": "products_per_row_mobile",
      "label": "Products per row on mobile",
      "options": [
        {
          "value": "1",
          "label": "1"
        },
        {
          "value": "2",
          "label": "2"
        }
      ],
      "default": "2"
    },
    {
      "type": "range",
      "id": "product_gap",
      "min": 8,
      "max": 40,
      "step": 4,
      "unit": "px",
      "label": "Gap between products",
      "default": 20
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Section padding",
      "default": 40
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "card_background_color",
      "label": "Card background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "product_title_color",
      "label": "Product title color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "product_price_color",
      "label": "Product price color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "compare_price_color",
      "label": "Compare price color",
      "default": "#999999"
    },
    {
      "type": "color",
      "id": "nav_button_color",
      "label": "Navigation button color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "nav_button_text_color",
      "label": "Navigation button text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "dot_color",
      "label": "Dot indicator color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 16,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 28
    },
    {
      "type": "range",
      "id": "product_title_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Product title size",
      "default": 16
    },
    {
      "type": "range",
      "id": "product_price_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Product price size",
      "default": 14
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "range",
      "id": "card_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Card border radius",
      "default": 8
    }
  ],
  "presets": [
    {
      "name": "Related products carousel"
    }
  ]
}
{% endschema %}