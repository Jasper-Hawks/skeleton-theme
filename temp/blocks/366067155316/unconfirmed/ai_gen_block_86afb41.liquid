{% doc %}
  @prompt
    Rotating carousel of my collections in the same style of the collection list, collections aren't displaying

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-collection-carousel-{{ ai_gen_id }} {
    position: relative;
    overflow: hidden;
    padding: {{ block.settings.section_padding }}px 0;
    background-color: {{ block.settings.background_color }};
  }

  .ai-collection-carousel__header-{{ ai_gen_id }} {
    text-align: center;
    margin-bottom: 40px;
  }

  .ai-collection-carousel__title-{{ ai_gen_id }} {
    font-size: {{ block.settings.heading_size }}px;
    color: {{ block.settings.text_color }};
    margin: 0 0 16px;
    font-weight: 600;
  }

  .ai-collection-carousel__subtitle-{{ ai_gen_id }} {
    font-size: {{ block.settings.subtitle_size }}px;
    color: {{ block.settings.text_color }};
    opacity: 0.8;
    margin: 0;
  }

  .ai-collection-carousel__container-{{ ai_gen_id }} {
    position: relative;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .ai-collection-carousel__track-wrapper-{{ ai_gen_id }} {
    overflow: hidden;
    position: relative;
  }

  .ai-collection-carousel__track-{{ ai_gen_id }} {
    display: flex;
    transition: transform 0.5s ease;
    gap: {{ block.settings.card_gap }}px;
  }

  .ai-collection-carousel__slide-{{ ai_gen_id }} {
    flex: 0 0 auto;
    width: calc((100% - {{ block.settings.card_gap | times: 2 }}px) / 3);
  }

  .ai-collection-carousel__card-{{ ai_gen_id }} {
    background-color: {{ block.settings.card_background }};
    border-radius: {{ block.settings.card_border_radius }}px;
    overflow: hidden;
    text-decoration: none;
    color: inherit;
    display: block;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .ai-collection-carousel__card-{{ ai_gen_id }}:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .ai-collection-carousel__image-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: {{ block.settings.image_height }}px;
    overflow: hidden;
  }

  .ai-collection-carousel__image-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .ai-collection-carousel__card-{{ ai_gen_id }}:hover .ai-collection-carousel__image-{{ ai_gen_id }} {
    transform: scale(1.05);
  }

  .ai-collection-carousel__image-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .ai-collection-carousel__image-placeholder-{{ ai_gen_id }} svg {
    width: 60%;
    height: 60%;
    opacity: 0.3;
  }

  .ai-collection-carousel__content-{{ ai_gen_id }} {
    padding: 20px;
  }

  .ai-collection-carousel__collection-title-{{ ai_gen_id }} {
    font-size: 18px;
    font-weight: 600;
    margin: 0 0 8px;
    color: {{ block.settings.card_text_color }};
  }

  .ai-collection-carousel__collection-description-{{ ai_gen_id }} {
    font-size: 14px;
    color: {{ block.settings.card_text_color }};
    opacity: 0.8;
    margin: 0 0 12px;
    line-height: 1.4;
  }

  .ai-collection-carousel__product-count-{{ ai_gen_id }} {
    font-size: 12px;
    color: {{ block.settings.card_text_color }};
    opacity: 0.6;
    margin: 0;
  }

  .ai-collection-carousel__controls-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 20px;
    margin-top: 30px;
  }

  .ai-collection-carousel__nav-button-{{ ai_gen_id }} {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    border: none;
    background-color: {{ block.settings.button_color }};
    color: {{ block.settings.button_text_color }};
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s ease, transform 0.2s ease;
  }

  .ai-collection-carousel__nav-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_color }};
    transform: scale(1.1);
  }

  .ai-collection-carousel__nav-button-{{ ai_gen_id }}:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .ai-collection-carousel__nav-button-{{ ai_gen_id }} svg {
    width: 20px;
    height: 20px;
  }

  .ai-collection-carousel__indicators-{{ ai_gen_id }} {
    display: flex;
    gap: 8px;
  }

  .ai-collection-carousel__indicator-{{ ai_gen_id }} {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    border: none;
    background-color: {{ block.settings.button_color }};
    opacity: 0.3;
    cursor: pointer;
    transition: opacity 0.3s ease, transform 0.2s ease;
  }

  .ai-collection-carousel__indicator-{{ ai_gen_id }}.active {
    opacity: 1;
    transform: scale(1.2);
  }

  .ai-collection-carousel__empty-state-{{ ai_gen_id }} {
    text-align: center;
    padding: 60px 20px;
    color: {{ block.settings.text_color }};
    opacity: 0.6;
  }

  @media screen and (max-width: 990px) {
    .ai-collection-carousel__slide-{{ ai_gen_id }} {
      width: calc((100% - {{ block.settings.card_gap }}px) / 2);
    }
  }

  @media screen and (max-width: 749px) {
    .ai-collection-carousel__slide-{{ ai_gen_id }} {
      width: 100%;
    }

    .ai-collection-carousel__container-{{ ai_gen_id }} {
      padding: 0 15px;
    }

    .ai-collection-carousel__title-{{ ai_gen_id }} {
      font-size: {{ block.settings.heading_size | times: 0.8 }}px;
    }
  }
{% endstyle %}

<collection-carousel-{{ ai_gen_id }}
  class="ai-collection-carousel-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  {% if block.settings.heading != blank or block.settings.subtitle != blank %}
    <div class="ai-collection-carousel__header-{{ ai_gen_id }}">
      {% if block.settings.heading != blank %}
        <h2 class="ai-collection-carousel__title-{{ ai_gen_id }}">{{ block.settings.heading }}</h2>
      {% endif %}
      {% if block.settings.subtitle != blank %}
        <p class="ai-collection-carousel__subtitle-{{ ai_gen_id }}">{{ block.settings.subtitle }}</p>
      {% endif %}
    </div>
  {% endif %}

  <div class="ai-collection-carousel__container-{{ ai_gen_id }}">
    {% assign selected_collections = block.settings.selected_collections %}
    {% if selected_collections and selected_collections.size > 0 %}
      <div class="ai-collection-carousel__track-wrapper-{{ ai_gen_id }}">
        <div class="ai-collection-carousel__track-{{ ai_gen_id }}" data-track>
          {% for collection in selected_collections %}
            <div class="ai-collection-carousel__slide-{{ ai_gen_id }}">
              <a href="{{ collection.url }}" class="ai-collection-carousel__card-{{ ai_gen_id }}">
                <div class="ai-collection-carousel__image-wrapper-{{ ai_gen_id }}">
                  {% if collection.featured_image %}
                    <img
                      src="{{ collection.featured_image | image_url: width: 600 }}"
                      alt="{{ collection.featured_image.alt | escape }}"
                      class="ai-collection-carousel__image-{{ ai_gen_id }}"
                      loading="lazy"
                      width="600"
                      height="{{ block.settings.image_height }}"
                    >
                  {% else %}
                    <div class="ai-collection-carousel__image-placeholder-{{ ai_gen_id }}">
                      {{ 'collection-1' | placeholder_svg_tag }}
                    </div>
                  {% endif %}
                </div>
                <div class="ai-collection-carousel__content-{{ ai_gen_id }}">
                  <h3 class="ai-collection-carousel__collection-title-{{ ai_gen_id }}">{{ collection.title }}</h3>
                  {% if collection.description != blank %}
                    <p class="ai-collection-carousel__collection-description-{{ ai_gen_id }}">
                      {{ collection.description | truncate: 100 }}
                    </p>
                  {% endif %}
                  <p class="ai-collection-carousel__product-count-{{ ai_gen_id }}">
                    {{ collection.products_count }}
                    {% if collection.products_count == 1 %}
                      product
                    {% else %}
                      products
                    {% endif %}
                  </p>
                </div>
              </a>
            </div>
          {% endfor %}
        </div>
      </div>

      {% if selected_collections.size > 3 %}
        <div class="ai-collection-carousel__controls-{{ ai_gen_id }}">
          <button
            class="ai-collection-carousel__nav-button-{{ ai_gen_id }}"
            data-prev
            aria-label="Previous collections"
          >
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="15,18 9,12 15,6"></polyline>
            </svg>
          </button>

          <div class="ai-collection-carousel__indicators-{{ ai_gen_id }}" data-indicators></div>

          <button
            class="ai-collection-carousel__nav-button-{{ ai_gen_id }}"
            data-next
            aria-label="Next collections"
          >
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="9,18 15,12 9,6"></polyline>
            </svg>
          </button>
        </div>
      {% endif %}
    {% else %}
      <div class="ai-collection-carousel__empty-state-{{ ai_gen_id }}">
        <p>Select collections to display in this carousel</p>
      </div>
    {% endif %}
  </div>
</collection-carousel-{{ ai_gen_id }}>

<script>
  (function() {
    class CollectionCarousel{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentSlide = 0;
        this.slidesToShow = 3;
        this.autoRotateInterval = null;
      }

      connectedCallback() {
        this.track = this.querySelector('[data-track]');
        this.prevButton = this.querySelector('[data-prev]');
        this.nextButton = this.querySelector('[data-next]');
        this.indicatorsContainer = this.querySelector('[data-indicators]');
        this.slides = this.querySelectorAll('.ai-collection-carousel__slide-{{ ai_gen_id }}');

        if (!this.track || this.slides.length === 0) return;

        this.setupCarousel();
        this.setupEventListeners();
        this.updateSlidesToShow();
        this.createIndicators();
        this.updateCarousel();
        this.startAutoRotate();

        window.addEventListener('resize', () => this.updateSlidesToShow());
      }

      disconnectedCallback() {
        this.stopAutoRotate();
        window.removeEventListener('resize', () => this.updateSlidesToShow());
      }

      setupCarousel() {
        this.totalSlides = this.slides.length;
        this.maxSlide = Math.max(0, this.totalSlides - this.slidesToShow);
      }

      updateSlidesToShow() {
        const width = window.innerWidth;
        if (width <= 749) {
          this.slidesToShow = 1;
        } else if (width <= 990) {
          this.slidesToShow = 2;
        } else {
          this.slidesToShow = 3;
        }
        this.maxSlide = Math.max(0, this.totalSlides - this.slidesToShow);
        this.currentSlide = Math.min(this.currentSlide, this.maxSlide);
        this.updateCarousel();
      }

      setupEventListeners() {
        if (this.prevButton) {
          this.prevButton.addEventListener('click', () => this.prevSlide());
        }
        if (this.nextButton) {
          this.nextButton.addEventListener('click', () => this.nextSlide());
        }

        this.addEventListener('mouseenter', () => this.stopAutoRotate());
        this.addEventListener('mouseleave', () => this.startAutoRotate());
      }

      createIndicators() {
        if (!this.indicatorsContainer || this.maxSlide === 0) return;

        this.indicatorsContainer.innerHTML = '';
        for (let i = 0; i <= this.maxSlide; i++) {
          const indicator = document.createElement('button');
          indicator.className = 'ai-collection-carousel__indicator-{{ ai_gen_id }}';
          indicator.setAttribute('aria-label', `Go to slide ${i + 1}`);
          indicator.addEventListener('click', () => this.goToSlide(i));
          this.indicatorsContainer.appendChild(indicator);
        }
      }

      updateCarousel() {
        if (!this.track) return;

        const slideWidth = 100 / this.slidesToShow;
        const translateX = -(this.currentSlide * slideWidth);
        this.track.style.transform = `translateX(${translateX}%)`;

        if (this.prevButton) {
          this.prevButton.disabled = this.currentSlide === 0;
        }
        if (this.nextButton) {
          this.nextButton.disabled = this.currentSlide >= this.maxSlide;
        }

        this.updateIndicators();
      }

      updateIndicators() {
        const indicators = this.querySelectorAll('.ai-collection-carousel__indicator-{{ ai_gen_id }}');
        indicators.forEach((indicator, index) => {
          indicator.classList.toggle('active', index === this.currentSlide);
        });
      }

      prevSlide() {
        if (this.currentSlide > 0) {
          this.currentSlide--;
          this.updateCarousel();
        }
      }

      nextSlide() {
        if (this.currentSlide < this.maxSlide) {
          this.currentSlide++;
          this.updateCarousel();
        } else {
          this.currentSlide = 0;
          this.updateCarousel();
        }
      }

      goToSlide(index) {
        this.currentSlide = Math.max(0, Math.min(index, this.maxSlide));
        this.updateCarousel();
      }

      startAutoRotate() {
        if (this.maxSlide === 0) return;
        this.stopAutoRotate();
        this.autoRotateInterval = setInterval(() => {
          this.nextSlide();
        }, {{ block.settings.auto_rotate_speed | times: 1000 }});
      }

      stopAutoRotate() {
        if (this.autoRotateInterval) {
          clearInterval(this.autoRotateInterval);
          this.autoRotateInterval = null;
        }
      }
    }

    customElements.define('collection-carousel-{{ ai_gen_id }}', CollectionCarousel{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Collection carousel",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Shop by collection"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Subtitle",
      "default": "Discover our curated collections"
    },
    {
      "type": "collection_list",
      "id": "selected_collections",
      "label": "Collections",
      "limit": 12
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Section padding",
      "default": 50
    },
    {
      "type": "range",
      "id": "card_gap",
      "min": 10,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Card spacing",
      "default": 20
    },
    {
      "type": "range",
      "id": "image_height",
      "min": 150,
      "max": 400,
      "step": 25,
      "unit": "px",
      "label": "Image height",
      "default": 250
    },
    {
      "type": "range",
      "id": "card_border_radius",
      "min": 0,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Card border radius",
      "default": 12
    },
    {
      "type": "header",
      "content": "Carousel settings"
    },
    {
      "type": "range",
      "id": "auto_rotate_speed",
      "min": 3,
      "max": 10,
      "step": 1,
      "unit": "s",
      "label": "Auto-rotate speed",
      "default": 5
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "card_background",
      "label": "Card background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "card_text_color",
      "label": "Card text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Button hover color",
      "default": "#333333"
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 20,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 32
    },
    {
      "type": "range",
      "id": "subtitle_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Subtitle size",
      "default": 16
    }
  ],
  "presets": [
    {
      "name": "Collection carousel"
    }
  ]
}
{% endschema %}