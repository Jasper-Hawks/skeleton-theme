{% doc %}
  @prompt
    Make a recommended products carousel that is mobile friendly and takes data from the search and discovery app., Center it horizontally, make it mobile friendly, and make sure the images are displaying properly, Make sure the cards show, Center horizontally and make buttons visible in mobile view, Center horizontally in relationship to the viewport. Make max width equal to the width of the viewport, Give me controls to center the block and for its width, Recreate the entire element but add the class "container". Remove width and height controls.

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-recommended-products-{{ ai_gen_id }} {
    padding: 40px 0;
    background-color: {{ block.settings.background_color }};
    display: flex;
    justify-content: center;
  }

  .ai-recommended-products__container-{{ ai_gen_id }} {
    margin: 0 auto;
    padding: 0 20px;width: 100%;
    display: flex;
    flex-direction: column;
    align-items: {% if block.settings.content_alignment == 'left' %}flex-start{% elsif block.settings.content_alignment == 'right' %}flex-end{% else %}center{% endif %};
  }

  .ai-recommended-products__header-{{ ai_gen_id }} {
    text-align: {{ block.settings.content_alignment }};
    margin-bottom: 30px;
    width: 100%;
  }

  .ai-recommended-products__title-{{ ai_gen_id }} {
    font-size: {{ block.settings.title_size }}px;
    color: {{ block.settings.title_color }};
    margin: 0 0 10px;}

  .ai-recommended-products__subtitle-{{ ai_gen_id }} {
    font-size: {{ block.settings.subtitle_size }}px;
    color: {{ block.settings.subtitle_color }};
    margin: 0;
  }

  .ai-recommended-products__carousel-{{ ai_gen_id }} {
    position: relative;
    overflow: hidden;
    margin: 0 auto;
    width: 100%;
  }

  .ai-recommended-products__track-{{ ai_gen_id }} {
    display: flex;
    transition: transform 0.3s ease;
    gap: 20px;
    width: 100%;
    justify-content: {% if block.settings.content_alignment == 'left' %}flex-start{% elsif block.settings.content_alignment == 'right' %}flex-end{% else %}center{% endif %};
  }

  .ai-recommended-products__slide-{{ ai_gen_id }} {
    flex: 0 0 calc(25% - 15px);
    min-width: 0;
    max-width: 280px;
  }

  .ai-recommended-products__product-{{ ai_gen_id }} {
    background: {{ block.settings.card_background }};
    border-radius: {{ block.settings.card_border_radius }}px;
    padding: 15px;
    text-align: center;
    border: 1px solid {{ block.settings.card_border_color }};
    height: 100%;
    display: flex;
    flex-direction: column;
    text-decoration: none;
    color: inherit;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .ai-recommended-products__product-{{ ai_gen_id }}:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .ai-recommended-products__image-wrapper-{{ ai_gen_id }} {
    position: relative;
    margin-bottom: 15px;aspect-ratio: 1;
    overflow: hidden;
    border-radius: 8px;
    background-color: #f8f8f8;
    width: 100%;
  }

  .ai-recommended-products__image-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  .ai-recommended-products__placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .ai-recommended-products__placeholder-{{ ai_gen_id }} svg {
    width: 60%;
    height: 60%;
    opacity: 0.3;
  }

  .ai-recommended-products__content-{{ ai_gen_id }} {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    text-align: center;
  }

  .ai-recommended-products__product-title-{{ ai_gen_id }} {
    font-size: 14px;
    color: {{ block.settings.product_title_color }};
    margin: 0 0 8px;
    font-weight: 600;
    line-height: 1.3;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .ai-recommended-products__price-{{ ai_gen_id }} {
    font-size: 16px;
    color: {{ block.settings.price_color }};
    font-weight: 700;
    margin-top: auto;
  }

  .ai-recommended-products__nav-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    gap: 15px;
    margin-top: 30px;
    width: 100%;
  }

  .ai-recommended-products__nav-button-{{ ai_gen_id }} {
    width: 50px;
    height: 50px;
    border: none;
    border-radius: 50%;
    background-color: {{ block.settings.nav_button_color }};
    color: {{ block.settings.nav_button_text_color }};
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s ease, transform 0.2s ease;box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  }

  .ai-recommended-products__nav-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.nav_button_hover_color }};
    transform: scale(1.05);
  }

  .ai-recommended-products__nav-button-{{ ai_gen_id }}:disabled {
    opacity: 0.4;
    cursor: not-allowed;
    transform: none;
  }

  .ai-recommended-products__nav-button-{{ ai_gen_id }}:disabled:hover {
    background-color: {{ block.settings.nav_button_color }};
    transform: none;
  }

  .ai-recommended-products__empty-state-{{ ai_gen_id }} {
    text-align: center;
    padding: 60px 20px;
    color: #666;
    width: 100%;
  }

  .ai-recommended-products__empty-title-{{ ai_gen_id }} {
    font-size: 18px;
    margin-bottom: 10px;
    color: #333;
  }

  @media screen and (max-width: 990px) {
    .ai-recommended-products__slide-{{ ai_gen_id }} {
      flex: 0 0 calc(33.333% - 14px);
    }
    
    .ai-recommended-products__container-{{ ai_gen_id }} {
      padding: 0 16px;
    }

    .ai-recommended-products__nav-button-{{ ai_gen_id }} {
      width: 48px;
      height: 48px;
    }
  }

  @media screen and (max-width: 749px) {
    .ai-recommended-products-{{ ai_gen_id }} {
      padding: 30px 0;
    }

    .ai-recommended-products__slide-{{ ai_gen_id }} {
      flex: 0 0 calc(50% - 10px);
    }

    .ai-recommended-products__container-{{ ai_gen_id }} {
      padding: 0 15px;
    }

    .ai-recommended-products__track-{{ ai_gen_id }} {
      gap: 15px;
    }

    .ai-recommended-products__title-{{ ai_gen_id }} {
      font-size: {{ block.settings.title_size | times: 0.8 }}px;
    }

    .ai-recommended-products__subtitle-{{ ai_gen_id }} {
      font-size: {{ block.settings.subtitle_size | times: 0.9 }}px;
    }

    .ai-recommended-products__nav-{{ ai_gen_id }} {
      gap: 20px;
      margin-top: 25px;
    }

    .ai-recommended-products__nav-button-{{ ai_gen_id }} {
      width: 46px;
      height: 46px;
      box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
    }
  }

  @media screen and (max-width: 480px) {
    .ai-recommended-products__slide-{{ ai_gen_id }} {
      flex: 0 0 calc(100% - 0px);
      max-width: 320px;
      margin: 0 auto;
    }

    .ai-recommended-products__track-{{ ai_gen_id }} {
      gap: 20px;
      justify-content: center;
    }

    .ai-recommended-products__container-{{ ai_gen_id }} {
      padding: 0 20px;
    }

    .ai-recommended-products__product-{{ ai_gen_id }} {
      max-width: 280px;
      margin: 0 auto;
    }

    .ai-recommended-products__nav-{{ ai_gen_id }} {
      gap: 25px;
      margin-top: 25px;
    }

    .ai-recommended-products__nav-button-{{ ai_gen_id }} {
      width: 44px;
      height: 44px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);
    }

    .ai-recommended-products__nav-button-{{ ai_gen_id }} svg {
      width: 18px;
      height: 18px;
    }
  }
{% endstyle %}

<recommended-products-carousel-{{ ai_gen_id }}
  class="ai-recommended-products-{{ ai_gen_id }}"
  data-app-id="{{ block.settings.app_id }}"
  data-intent="{{ block.settings.intent }}"
  data-product-id="{{ product.id | default: '' }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-recommended-products__container-{{ ai_gen_id }} container">
    {% if block.settings.title != blank or block.settings.subtitle != blank %}
      <div class="ai-recommended-products__header-{{ ai_gen_id }}">
        {% if block.settings.title != blank %}
          <h2 class="ai-recommended-products__title-{{ ai_gen_id }}">{{ block.settings.title }}</h2>
        {% endif %}
        {% if block.settings.subtitle != blank %}
          <p class="ai-recommended-products__subtitle-{{ ai_gen_id }}">{{ block.settings.subtitle }}</p>
        {% endif %}
      </div>
    {% endif %}

    <div class="ai-recommended-products__carousel-{{ ai_gen_id }}">
      <div class="ai-recommended-products__track-{{ ai_gen_id }}" data-track><div class="ai-recommended-products__empty-state-{{ ai_gen_id }}" data-empty-state>
          <h3 class="ai-recommended-products__empty-title-{{ ai_gen_id }}">Loading recommendations...</h3>
          <p>Fetching personalized product suggestions</p>
        </div>
      </div></div>

    <div class="ai-recommended-products__nav-{{ ai_gen_id }}" data-nav style="display: none;">
      <button class="ai-recommended-products__nav-button-{{ ai_gen_id }}" data-prev aria-label="Previous products">
        <svg width="20" height="20" viewBox="0 0 16 16" fill="currentColor">
          <path d="M1012L6 8l4-4v8z"/>
        </svg>
      </button>
      <button class="ai-recommended-products__nav-button-{{ ai_gen_id }}" data-next aria-label="Next products">
        <svg width="20" height="20" viewBox="0 0 16 16" fill="currentColor">
          <path d="M6 4l4 4-4 4V4z"/>
        </svg>
      </button>
    </div>
  </div>
</recommended-products-carousel-{{ ai_gen_id }}><script>
  (function() {
    class RecommendedProductsCarousel{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentSlide = 0;
        this.slidesPerView = 4;
        this.products = [];
      }

      connectedCallback() {
        this.track = this.querySelector('[data-track]');
        this.nav = this.querySelector('[data-nav]');
        this.prevButton = this.querySelector('[data-prev]');
        this.nextButton = this.querySelector('[data-next]');
        this.emptyState = this.querySelector('[data-empty-state]');

        this.setupEventListeners();
        this.updateSlidesPerView();
        this.loadRecommendations();

        window.addEventListener('resize', () => this.updateSlidesPerView());
      }

      setupEventListeners() {
        this.prevButton.addEventListener('click', () => this.previousSlide());
        this.nextButton.addEventListener('click', () => this.nextSlide());
      }

      updateSlidesPerView() {
        const width = window.innerWidth;
        if (width <= 480) {
          this.slidesPerView = 1;
        } else if (width <= 749) {
          this.slidesPerView = 2;
        } else if (width <= 990) {
          this.slidesPerView = 3;
        } else {
          this.slidesPerView = 4;
        }this.updateCarousel();
      }

      async loadRecommendations() {
        try {
          const appId = this.dataset.appId;
          const intent = this.dataset.intent;
          const productId = this.dataset.productId;

          let apiUrl = '/recommendations/products.json?limit=12';
          
          if (productId) {
            apiUrl += `&product_id=${productId}`;
          }
          
          if (intent) {
            apiUrl += `&intent=${intent}`;
          }

          const response = await fetch(apiUrl);
          
          if (!response.ok) {
            throw new Error('Failed to fetch recommendations');
          }

          const data = await response.json();
          this.products = data.products || [];

          if (this.products.length === 0) {
            this.showFallbackProducts();
          } else {
            this.renderProducts();
          }
        } catch (error) {
          console.warn('Failed to load recommendations:', error);
          this.showFallbackProducts();
        }
      }

      async showFallbackProducts() {
        try {
          const response = await fetch('/products.json?limit=12');
          const data = await response.json();
          this.products = data.products || [];
          
          if (this.products.length === 0) {
            this.showEmptyState();
          } else {
            this.renderProducts();
          }
        } catch (error) {
          console.warn('Failed to load fallback products:', error);
          this.showEmptyState();
        }
      }

      showEmptyState() {
        this.emptyState.innerHTML = `
          <h3 class="ai-recommended-products__empty-title-{{ ai_gen_id }}">No products available</h3>
          <p>Unable to load product recommendations at this time</p>
        `;
      }

      renderProducts() {
        if (this.products.length === 0) {
          this.showEmptyState();
          return;
        }

        this.emptyState.style.display = 'none';
        this.nav.style.display = 'flex';

        const productsHTML = this.products.map(product => {
          const imageUrl = this.getProductImageUrl(product);
          const productPrice = this.getProductPrice(product);

          return `
            <div class="ai-recommended-products__slide-{{ ai_gen_id }}">
              <a href="/products/${product.handle}" class="ai-recommended-products__product-{{ ai_gen_id }}">
                <div class="ai-recommended-products__image-wrapper-{{ ai_gen_id }}">
                  ${imageUrl ? 
                    `<img 
                      src="${imageUrl}" 
                      alt="${this.escapeHtml(product.title ||'Product image')}" 
                      class="ai-recommended-products__image-{{ ai_gen_id }}"loading="lazy"
                      width="280"
                      height="280"
                    >` :
                    `<div class="ai-recommended-products__placeholder-{{ ai_gen_id }}">
                      {{'product-1' | placeholder_svg_tag }}
                    </div>`
                  }
                </div>
                <div class="ai-recommended-products__content-{{ ai_gen_id }}">
                  <h3 class="ai-recommended-products__product-title-{{ ai_gen_id }}">${this.escapeHtml(product.title || 'Untitled Product')}</h3>
                  <div class="ai-recommended-products__price-{{ ai_gen_id }}">
                    ${this.formatPrice(productPrice)}
                  </div>
                </div>
              </a>
            </div>
          `;
        }).join('');

        this.track.innerHTML = productsHTML;
        this.updateCarousel();
      }

      getProductImageUrl(product) {
        if (product.featured_image) {
          return product.featured_image;
        }
        
        if (product.images && product.images.length > 0) {
          return product.images[0];
        }

        if (product.image && product.image.src) {
          return product.image.src;
        }

        return null;
      }

      getProductPrice(product) {
        if (product.price !== undefined) {
          return product.price;
        }
        
        if (product.variants && product.variants.length > 0) {
          return product.variants[0].price;
        }

        if (product.price_min !== undefined) {
          return product.price_min;
        }

        return null;
      }

      escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
      }

      formatPrice(price) {
        if (!price && price !== 0) return 'Price unavailable';
        
        let numericPrice = parseFloat(price);
        
        if (isNaN(numericPrice)) return 'Price unavailable';
        
        if (numericPrice >= 100) {
          numericPrice = numericPrice / 100;
        }
        
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD'
        }).format(numericPrice);
      }

      previousSlide() {
        this.currentSlide = Math.max(0, this.currentSlide - 1);
        this.updateCarousel();
      }

      nextSlide() {
        const maxSlide = Math.max(0, this.products.length - this.slidesPerView);
        this.currentSlide = Math.min(maxSlide, this.currentSlide + 1);
        this.updateCarousel();
      }

      updateCarousel() {
        if (this.products.length === 0) return;

        const slideWidth = 100 / this.slidesPerView;
        const translateX = -(this.currentSlide * slideWidth);
        this.track.style.transform = `translateX(${translateX}%)`;

        const maxSlide = Math.max(0, this.products.length - this.slidesPerView);
        this.prevButton.disabled = this.currentSlide === 0;
        this.nextButton.disabled = this.currentSlide >= maxSlide || this.products.length <= this.slidesPerView;
      }
    }

    customElements.define('recommended-products-carousel-{{ ai_gen_id }}', RecommendedProductsCarousel{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Recommended products",
  "settings": [
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "select",
      "id": "content_alignment",
      "label": "Content alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "center"
    },
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "You might also like"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Subtitle",
      "default": "Recommended products just for you"
    },
    {
      "type": "header",
      "content": "Search & Discovery settings"
    },
    {
      "type": "text",
      "id": "app_id",
      "label": "App ID",
      "info": "Your Search & Discovery app ID (optional)"
    },
    {
      "type": "select",
      "id": "intent",
      "label": "Recommendation type",
      "options": [
        {
          "value": "related",
          "label": "Related products"
        },
        {
          "value": "complementary",
          "label": "Complementary products"
        }
      ],
      "default": "related"
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 16,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 28
    },
    {
      "type": "color",
      "id": "subtitle_color",
      "label": "Subtitle color",
      "default": "#666666"
    },
    {
      "type": "range",
      "id": "subtitle_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Subtitle size",
      "default": 16
    },
    {
      "type": "header",
      "content": "Product cards"
    },
    {
      "type": "color",
      "id": "card_background",
      "label": "Card background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "card_border_color",
      "label": "Card border color",
      "default": "#e5e5e5"
    },
    {
      "type": "range",
      "id": "card_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Card border radius",
      "default": 8
    },
    {
      "type": "color",
      "id": "product_title_color",
      "label": "Product title color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "price_color",
      "label": "Price color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Navigation"
    },
    {
      "type": "color",
      "id": "nav_button_color",
      "label": "Button color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "nav_button_text_color",
      "label": "Button text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "nav_button_hover_color",
      "label": "Button hover color",
      "default": "#333333"
    }
  ],
  "presets": [
    {
      "name": "Recommended products"
    }
  ]
}
{% endschema %}