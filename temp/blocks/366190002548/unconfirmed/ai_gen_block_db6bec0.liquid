{% doc %}
  @prompt
    Collection carousel

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-collection-carousel-{{ ai_gen_id }} {
    position: relative;
    padding: {{ block.settings.section_padding }}px 0;
    background-color: {{ block.settings.background_color }};
  }

  .ai-collection-carousel-container-{{ ai_gen_id }} {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .ai-collection-carousel-header-{{ ai_gen_id }} {
    text-align: center;
    margin-bottom: 40px;
  }

  .ai-collection-carousel-title-{{ ai_gen_id }} {
    font-size: {{ block.settings.title_size }}px;
    color: {{ block.settings.text_color }};
    margin: 0 0 16px;}

  .ai-collection-carousel-description-{{ ai_gen_id }} {
    font-size: {{ block.settings.description_size }}px;
    color: {{ block.settings.text_color }};
    margin: 0;
    opacity: 0.8;
  }

  .ai-collection-carousel-wrapper-{{ ai_gen_id }} {
    position: relative;
    overflow: hidden;
    border-radius: {{ block.settings.card_border_radius }}px;}

  .ai-collection-carousel-track-{{ ai_gen_id }} {
    display: flex;
    transition: transform 0.3s ease;
    gap: {{ block.settings.card_spacing }}px;
  }

  .ai-collection-carousel-slide-{{ ai_gen_id }} {
    flex: 0 0 calc(100% / {{ block.settings.slides_desktop }} - {{ block.settings.card_spacing | times: block.settings.slides_desktop | minus: block.settings.card_spacing | divided_by: block.settings.slides_desktop }}px);
    background-color: {{ block.settings.card_background }};
    border-radius: {{ block.settings.card_border_radius }}px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);transition: transform 0.3s ease;
  }

  .ai-collection-carousel-slide-{{ ai_gen_id }}:hover {
    transform: translateY(-4px);
  }

  .ai-collection-carousel-image-container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: {{ block.settings.image_height }}px;
    overflow: hidden;
  }

  .ai-collection-carousel-image-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-collection-carousel-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height:100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .ai-collection-carousel-placeholder-{{ ai_gen_id }} svg {
    width: 60%;
    height: 60%;
    opacity: 0.3;
  }

  .ai-collection-carousel-empty-state-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 14px;
    color: #666;
    text-align: center;
    pointer-events: none;
  }

  .ai-collection-carousel-content-{{ ai_gen_id }} {
    padding: 24px;
  }

  .ai-collection-carousel-collection-title-{{ ai_gen_id }} {
    font-size: 20px;
    font-weight: 600;
    color: {{ block.settings.card_text_color }};
    margin: 0 0 8px;
    text-decoration: none;
  }

  .ai-collection-carousel-collection-title-{{ ai_gen_id }}:hover {
    opacity: 0.8;
  }

  .ai-collection-carousel-collection-description-{{ ai_gen_id }} {
    font-size: 14px;
    color: {{ block.settings.card_text_color }};
    opacity: 0.7;
    margin: 0 0 16px;
    line-height: 1.4;
  }

  .ai-collection-carousel-product-count-{{ ai_gen_id }} {
    font-size: 12px;
    color: {{ block.settings.card_text_color }};
    opacity: 0.6;
    margin-bottom: 16px;
  }

  .ai-collection-carousel-button-{{ ai_gen_id }} {
    display: inline-block;
    padding: 10px 20px;
    background-color: {{ block.settings.button_color }};
    color: {{ block.settings.button_text_color }};
    text-decoration: none;
    border-radius: {{ block.settings.button_border_radius }}px;
    font-size: 14px;
    font-weight: 500;
    transition: background-color 0.3s ease;
  }

  .ai-collection-carousel-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_color }};
  }

  .ai-collection-carousel-nav-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: {{ block.settings.nav_button_color }};
    color: {{ block.settings.nav_button_text_color }};
    border: none;
    width: 48px;
    height: 48px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2;
    transition: background-color 0.3s ease, opacity 0.3s ease;box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  }

  .ai-collection-carousel-nav-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.nav_button_hover_color }};
  }

  .ai-collection-carousel-nav-{{ ai_gen_id }}:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .ai-collection-carousel-nav-prev-{{ ai_gen_id }} {
    left: -24px;
  }

  .ai-collection-carousel-nav-next-{{ ai_gen_id }} {
    right: -24px;
  }

  .ai-collection-carousel-nav-{{ ai_gen_id }} svg {
    width: 20px;
    height: 20px;
  }

  .ai-collection-carousel-dots-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    gap: 8px;
    margin-top: 32px;
  }

  .ai-collection-carousel-dot-{{ ai_gen_id }} {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background-color: {{ block.settings.dot_color }};
    opacity: 0.3;
    cursor: pointer;
    transition: opacity 0.3s ease;border: none;
  }

  .ai-collection-carousel-dot-{{ ai_gen_id }}.active {
    opacity: 1;
  }

  @media screen and (max-width: 768px) {
    .ai-collection-carousel-slide-{{ ai_gen_id }} {
      flex: 0 0 calc(100% / {{ block.settings.slides_mobile }} - {{ block.settings.card_spacing | times: block.settings.slides_mobile | minus: block.settings.card_spacing | divided_by: block.settings.slides_mobile }}px);
    }

    .ai-collection-carousel-nav-{{ ai_gen_id }} {
      display: none;
    }

    .ai-collection-carousel-container-{{ ai_gen_id }} {
      padding: 0 16px;
    }
  }
{% endstyle %}<collection-carousel-{{ ai_gen_id }}
  class="ai-collection-carousel-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-collection-carousel-container-{{ ai_gen_id }}">
    {% if block.settings.title != blank or block.settings.description != blank %}
      <div class="ai-collection-carousel-header-{{ ai_gen_id }}">
        {% if block.settings.title != blank %}
          <h2 class="ai-collection-carousel-title-{{ ai_gen_id }}">{{ block.settings.title }}</h2>
        {% endif %}
        {% if block.settings.description != blank %}
          <div class="ai-collection-carousel-description-{{ ai_gen_id }}">{{ block.settings.description }}</div>
        {% endif %}
      </div>
    {% endif %}

    <div class="ai-collection-carousel-wrapper-{{ ai_gen_id }}">
      <div class="ai-collection-carousel-track-{{ ai_gen_id }}" data-track>
        {% if block.settings.collections != blank %}
          {% for collection in block.settings.collections %}
            <div class="ai-collection-carousel-slide-{{ ai_gen_id }}">
              <div class="ai-collection-carousel-image-container-{{ ai_gen_id }}">
                {% if collection.featured_image %}
                  <img
                    src="{{ collection.featured_image | image_url: width: 600 }}"
                    alt="{{ collection.featured_image.alt | escape }}"
                    class="ai-collection-carousel-image-{{ ai_gen_id }}"loading="lazy"
                    width="600"
                    height="{{ block.settings.image_height }}"
                  >
                {% else %}
                  <div class="ai-collection-carousel-placeholder-{{ ai_gen_id }}">
                    {{ 'collection-1' | placeholder_svg_tag }}
                  </div>
                {% endif %}
              </div>
              <div class="ai-collection-carousel-content-{{ ai_gen_id }}">
                <a href="{{ collection.url }}" class="ai-collection-carousel-collection-title-{{ ai_gen_id }}">
                  {{ collection.title }}
                </a>
                {% if collection.description != blank %}
                  <div class="ai-collection-carousel-collection-description-{{ ai_gen_id }}">
                    {{ collection.description | truncate: 120 }}
                  </div>
                {% endif %}
                <div class="ai-collection-carousel-product-count-{{ ai_gen_id }}">
                  {{ collection.products_count }} 
                  {% if collection.products_count == 1 %}
                    product
                  {% else %}
                    products
                  {% endif %}
                </div>
                <a href="{{ collection.url }}" class="ai-collection-carousel-button-{{ ai_gen_id }}">
                  {{ block.settings.button_text }}
                </a>
              </div>
            </div>
          {% endfor %}
        {% else %}
          {% for i in (1..6) %}
            <div class="ai-collection-carousel-slide-{{ ai_gen_id }}">
              <div class="ai-collection-carousel-image-container-{{ ai_gen_id }}"><div class="ai-collection-carousel-placeholder-{{ ai_gen_id }}">
                  {{ 'collection-1' | placeholder_svg_tag }}
                  {% if forloop.first %}
                    <div class="ai-collection-carousel-empty-state-{{ ai_gen_id }}">
                      Next, add collections
                    </div>
                  {% endif %}
                </div>
              </div>
              <div class="ai-collection-carousel-content-{{ ai_gen_id }}">
                <div class="ai-collection-carousel-collection-title-{{ ai_gen_id }}">
                  Collection {{ forloop.index }}
                </div>
                <div class="ai-collection-carousel-collection-description-{{ ai_gen_id }}">
                  Collection description goes here
                </div>
                <div class="ai-collection-carousel-product-count-{{ ai_gen_id }}">
                  0 products
                </div>
                <span class="ai-collection-carousel-button-{{ ai_gen_id }}">
                  {{ block.settings.button_text }}
                </span>
              </div>
            </div>
          {% endfor %}
        {% endif %}
      </div>

      {% if block.settings.show_navigation %}
        <button
          class="ai-collection-carousel-nav-{{ ai_gen_id }} ai-collection-carousel-nav-prev-{{ ai_gen_id }}"
          data-prevaria-label="Previous collections"
        >
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="15,18 9,12 15,6"></polyline>
          </svg>
        </button>
        <button
          class="ai-collection-carousel-nav-{{ ai_gen_id }} ai-collection-carousel-nav-next-{{ ai_gen_id }}"
          data-next
          aria-label="Next collections"
        >
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="9,18 15,12 9,6"></polyline>
          </svg>
        </button>
      {% endif %}
    </div>

    {% if block.settings.show_dots %}
      <div class="ai-collection-carousel-dots-{{ ai_gen_id }}" data-dots></div>
    {% endif %}
  </div>
</collection-carousel-{{ ai_gen_id }}><script>
  (function() {
    class CollectionCarousel{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentIndex = 0;
        this.slidesDesktop = {{ block.settings.slides_desktop }};
        this.slidesMobile = {{ block.settings.slides_mobile }};
        this.autoplay = {{ block.settings.autoplay }};
        this.autoplaySpeed = {{ block.settings.autoplay_speed | times: 1000 }};
        this.autoplayTimer = null;
      }

      connectedCallback() {
        this.track = this.querySelector('[data-track]');
        this.prevBtn = this.querySelector('[data-prev]');
        this.nextBtn = this.querySelector('[data-next]');
        this.dotsContainer = this.querySelector('[data-dots]');
        this.slides = this.querySelectorAll('.ai-collection-carousel-slide-{{ ai_gen_id }}');

        if (!this.track || this.slides.length === 0) return;

        this.setupCarousel();
        this.setupEventListeners();
        this.updateCarousel();

        if (this.autoplay) {
          this.startAutoplay();
        }
      }

      disconnectedCallback() {
        if (this.autoplayTimer) {
          clearInterval(this.autoplayTimer);
        }
      }

      setupCarousel() {
        this.createDots();
        this.updateNavigation();
      }

      setupEventListeners() {
        if (this.prevBtn) {
          this.prevBtn.addEventListener('click', () => this.goToPrev());
        }
        if (this.nextBtn) {
          this.nextBtn.addEventListener('click', () => this.goToNext());
        }

        this.addEventListener('mouseenter', () => this.stopAutoplay());
        this.addEventListener('mouseleave', () => {
          if (this.autoplay) this.startAutoplay();
        });

        let startX = 0;
        let currentX = 0;
        let isDragging = false;

        this.track.addEventListener('touchstart', (e) => {
          startX = e.touches[0].clientX;
          isDragging = true;
        });

        this.track.addEventListener('touchmove', (e) => {
          if (!isDragging) return;
          currentX = e.touches[0].clientX;});

        this.track.addEventListener('touchend', () => {
          if (!isDragging) return;
          isDragging = false;
          const diff = startX - currentX;
          if (Math.abs(diff) > 50) {
            if (diff > 0) {
              this.goToNext();
            } else {
              this.goToPrev();
            }
          }
        });

        window.addEventListener('resize', () => this.updateCarousel());
      }

      createDots() {
        if (!this.dotsContainer) return;

        const slidesPerView = this.getSlidesPerView();
        const totalDots = Math.ceil(this.slides.length / slidesPerView);

        this.dotsContainer.innerHTML = '';
        for (let i = 0; i < totalDots; i++) {
          const dot = document.createElement('button');
          dot.className = 'ai-collection-carousel-dot-{{ ai_gen_id }}';
          dot.setAttribute('aria-label', `Go to slide group ${i + 1}`);
          dot.addEventListener('click', () => this.goToSlide(i * slidesPerView));
          this.dotsContainer.appendChild(dot);
        }
      }

      getSlidesPerView() {
        return window.innerWidth <= 768 ? this.slidesMobile : this.slidesDesktop;
      }

      getMaxIndex() {
        const slidesPerView = this.getSlidesPerView();
        return Math.max(0, this.slides.length - slidesPerView);
      }

      goToPrev() {
        const slidesPerView = this.getSlidesPerView();
        this.currentIndex = Math.max(0, this.currentIndex - slidesPerView);
        this.updateCarousel();
      }

      goToNext() {
        const slidesPerView = this.getSlidesPerView();
        const maxIndex = this.getMaxIndex();
        this.currentIndex = Math.min(maxIndex, this.currentIndex + slidesPerView);
        this.updateCarousel();
      }

      goToSlide(index) {
        const maxIndex = this.getMaxIndex();
        this.currentIndex = Math.min(maxIndex, Math.max(0, index));
        this.updateCarousel();
      }

      updateCarousel() {
        const slideWidth = this.slides[0].offsetWidth;
        const gap = {{ block.settings.card_spacing }};
        const offset = -(this.currentIndex * (slideWidth + gap));
        
        this.track.style.transform = `translateX(${offset}px)`;
        this.updateNavigation();
        this.updateDots();
      }

      updateNavigation() {
        if (this.prevBtn) {
          this.prevBtn.disabled = this.currentIndex === 0;
        }
        if (this.nextBtn) {
          this.nextBtn.disabled = this.currentIndex >= this.getMaxIndex();
        }
      }

      updateDots() {
        if (!this.dotsContainer) return;

        const dots = this.dotsContainer.querySelectorAll('.ai-collection-carousel-dot-{{ ai_gen_id }}');
        const slidesPerView = this.getSlidesPerView();
        const activeDotIndex = Math.floor(this.currentIndex / slidesPerView);

        dots.forEach((dot, index) => {
          dot.classList.toggle('active', index === activeDotIndex);
        });
      }

      startAutoplay() {
        if (!this.autoplay) return;
        this.autoplayTimer = setInterval(() => {
          if (this.currentIndex >= this.getMaxIndex()) {
            this.currentIndex = 0;
          } else {
            this.goToNext();
            return;
          }
          this.updateCarousel();
        }, this.autoplaySpeed);
      }

      stopAutoplay() {
        if (this.autoplayTimer) {
          clearInterval(this.autoplayTimer);
          this.autoplayTimer = null;
        }
      }
    }

    customElements.define('collection-carousel-{{ ai_gen_id }}', CollectionCarousel{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Collection carousel",
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Shop by collection"
    },
    {
      "type": "textarea",
      "id": "description",
      "label": "Description",
      "default": "Discover our curated collections"
    },
    {
      "type": "collection_list",
      "id": "collections",
      "label": "Collections",
      "limit": 12
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button text",
      "default": "Shop collection"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "select",
      "id": "slides_desktop",
      "label": "Slides per view on desktop",
      "options": [
        {"value": "2", "label": "2"},
        {"value": "3", "label": "3"},
        {"value": "4", "label": "4"}
      ],
      "default": "3"
    },
    {
      "type": "select",
      "id": "slides_mobile",
      "label": "Slides per view on mobile",
      "options": [
        {"value": "1", "label": "1"},
        {"value": "2", "label": "2"}
      ],
      "default": "1"
    },
    {
      "type": "range",
      "id": "image_height",
      "min": 150,
      "max": 400,
      "step": 10,
      "unit": "px",
      "label": "Image height",
      "default": 250
    },
    {
      "type": "range",
      "id": "card_spacing",
      "min": 10,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Card spacing",
      "default": 20
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 20,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Section padding",
      "default": 60
    },
    {
      "type": "header",
      "content": "Navigation"
    },
    {
      "type": "checkbox",
      "id": "show_navigation",
      "label": "Show navigation arrows",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_dots",
      "label": "Show dots",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Autoplay",
      "default": false
    },
    {
      "type": "range",
      "id": "autoplay_speed",
      "min": 2,
      "max": 10,
      "step": 1,
      "unit": "s",
      "label": "Autoplay speed",
      "default": 4
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "card_background",
      "label": "Card background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "card_text_color",
      "label": "Card text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Button hover color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "nav_button_color",
      "label": "Navigation button color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "nav_button_text_color",
      "label": "Navigation button text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "nav_button_hover_color",
      "label": "Navigation button hover color",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "dot_color",
      "label": "Dot color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 16,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 32
    },
    {
      "type": "range",
      "id": "description_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Description size",
      "default": 16
    },
    {
      "type": "range",
      "id": "card_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Card border radius",
      "default": 8
    },
    {
      "type": "range",
      "id": "button_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Button border radius",
      "default": 4
    }
  ],
  "presets": [
    {
      "name": "Collection carousel"
    }
  ]
}
{% endschema %}