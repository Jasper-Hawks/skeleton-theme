<aside
  class="d-flex flex-column flex-shrink-0 p-3 text-white sidebar-content pinyon-script-regular collapse"
  style="width: 100%;height:100%;"
  id="cart-sidebar"
>
  <a href="/" class="d-flex align-items-center mb-3 mb-md-0 me-md-auto text-white text-decoration-none">
    <span class="fs-4">Cart</span>
  </a>
  <hr>
  <div style="overflow-y: auto; overflow-x:hidden;">
    {% for item in cart.items %}
      <div class="row mb-1">
        <div class="col-md-1 cart-image">
          {% render 'image', image: item.image, url: item.url %}
        </div>
        <div class="col-md-5 product-title-table inconsolata-expanded">
          <p class="">{{ item.quantity }}x {{ item.product.title }}</p>
          <p id="price" class="">{{ item.product.price | money }}</p>

          <label>Quantity:</label>
          <input
            style="width:5rem;"
            type="number"
            name="updates[]"
            value="{{ item.quantity }}"
            id="quantity"
            onchange="updateQuantity();"
          >
          <p class="inconsolata-expanded">
            Subtotal <span id="subtotal">{{ item.quantity | times: item.product.price | money }}</span>
          </p>
          {{ 'cart.remove' | t | link_to: item.url_to_remove }}
        </div>
        <hr>
      </div>
    {% endfor %}
  </div>
  <hr>
  <h1>Total: {{ cart.total_price | money }}</h1>
  <input type="submit" name="checkout" value="{{ 'cart.checkout' | t }}">
</aside>
<script>
  document.getElementById('product-form').addEventListener('submit', function(event) {
    event.preventDefault(); // Prevent the default form submission

    const formData = new FormData(this);
    const queryString = new URLSearchParams(formData).toString();
    {% comment %}
    const filterForm = document.getElementById('filter-form');
    const checkedBoxes = filterForm.querySelectorAll('input[type=checkbox]:checked');
    let activeFilters = []
    let nodeIds = []
    

    for (let i = 0; i < checkedBoxes.length; i++){
      let activeFilter = checkedBoxes[i].nextSibling.textContent.trim();
      let nodeID = checkedBoxes[i].id;
      activeFilters.push(activeFilter);
      nodeIds.push(nodeID)
    }
    {% endcomment %}
    console.log("/collections/{{ collection.title }}?view=ajax&" + queryString)

    fetch(`/collections/{{ collection.title }}?sort_by=${value}&view=ajax&${queryString}`)
      .then(response => response.text())
      .then(data => {
        // Update the filtered results section with the new content
        document.getElementById('filtered-results').innerHTML = data;
        clearActiveFilters();
        updateActiveFilters(activeFilters,nodeIds);

       // document.getElementById('active-filters').appendChild(activeFilterAnchor);
      })
      .catch(error => console.error('Error:', error));
  });

  
    document.getElementById('cart-toggle').addEventListener('click', function() {
    const sidebar = document.getElementById('cart-sidebar');
      console.log("cart button click")
    sidebar.classList.toggle('active'); // Toggle the 'active' class
  });
</script>

{% schema %}
{
  "name": "cart-sidebar",
  "settings": []
}
{% endschema %}
