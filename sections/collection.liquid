{% comment %}
  This section is used in the collection template to render collection page
  listing all products within a collection.

  https://shopify.dev/docs/storefronts/themes/architecture/templates/collection
{% endcomment %}
 {% render 'modal' %}
<div class="container my-4"></div>

<div class="container my-2">
  <div class="row">
    <div class="col-lg-3">
      <h5 class="pt-serif-regular text-center">Filter</h5>
      <hr>
      <form id="filter-form" class="filter-form" method="get" action="/collections/{{ collection.handle }}">
        {%- for filter in collection.filters -%}
          <details class="filter-group pt-serif-regular">
            <summary class="filter-group-summary">
              <span>{{ filter.label }}</span>
              {%- if filter.active_values.size > 0 -%}
                <span>({{ filter.active_values.size }})</span>
              {%- endif -%}
            </summary>
            <div class="filter-group-display">
              <div class="filter-group-display__header">
                {%- if filter.active_values.size > 0 -%}
                  <a href="{{ filter.url_to_remove }}" class="filter-group-display__header-reset">Reset</a>
                {%- endif -%}
              </div>
              {%- case filter.type -%}
                {%- when 'boolean', 'list' -%}
                  <ul class="filter-group-display__list">
                    {%- for filter_value in filter.values -%}
                      <li class="filter-group-display__list-item">
                        <label for="Filter-{{ filter.param_name }}-{{ forloop.index }}">
                          <input
                            type="checkbox"
                            name="{{ filter_value.param_name }}"
                            value="{{ filter_value.value }}"
                            id="Filter-{{ filter.param_name }}-{{ forloop.index }}"
                            {% if filter_value.active -%}
                              checked
                            {%- endif %}
                            {% if filter_value.count == 0 and filter_value.active == false -%}
                              disabled
                            {%- endif %}
                          >
                          {{ filter_value.label }}
                        </label>
                      </li>
                    {%- endfor -%}
                  </ul>
              {%- endcase -%}
            </div>
          </details>
          <hr>
        {%- endfor -%}

        <input
          id="main-apply-filter-btn"
          class="filter-btn inconsolata-expanded"
          style="display:none;"
          type="submit"
          value="Apply"
        >
        <div class="sort-by--container pt-serif-regular">
        <label for="sort-by">Sort by</label>
        <select id="sort-by" class="sort-by">
          {% for option in collection.sort_options %}
            <option
              value="{{ option.value }}"
              {% if option.value == collection.sort_by %}
                selected
              {% endif %}
            >
              {{ option.name }}
            </option>
          {% endfor %}
        </select>
      </div>

        <a
          onclick="clearAll()"
          class="inconsolata-expanded bg-dark active-filters__clear"
          >Clear all</a
        >
        <div class="active-filters" id="active-filters">
          <br>
          <br>

          <!-- Fallback incase AJAX fails -->
          {%- for filter in collection.filters -%}
            {%- if filter.type == 'price_range' -%}
              {%- if filter.min_value.value != null or filter.max_value.value != null -%}
                <a class="active-filters__remove-filter bg-dark" href="{{ filter.url_to_remove }}">
                  {%- assign min_value = filter.min_value.value | default: 0 -%}
                  {%- assign max_value = filter.max_value.value | default: filter.range_max -%}
                  {{ min_value | money }} - {{ max_value | money }} X
                </a>
              {%- endif -%}
            {%- else -%}
              {%- for filter_value in filter.active_values -%}
                <a class="active-filters__remove-filter bg-dark" href="{{ filter_value.url_to_remove }}">
                  {{ filter.label }}: {{ filter_value.label }} X
                </a>
                <br>
              {%- endfor -%}
            {%- endif -%}
          {%- endfor -%}
        </div>
      </form>
    </div>

    <div class="col">
      <h5 class="text-center pt-serif-regular">{{ collection.description }}</h5>
      <hr>
      <div class="col">
  <div class="collection-products" id="filtered-results">
    {% paginate collection.products by 20 %}
      <div class="row">
        {% for product in collection.products %}
          <div class="col-sm-4 product-listing hover-underline">
            <div class="collection-product">
              {% if product.featured_image %}
                {% render 'image',
                  class: 'collection-product__image',
                  image: product.featured_image,
                  url: product.url,
                  width: 400,
                  height: 400,
                  crop: 'center'
                %}
              {% endif %}
              <div class="collection-product__content inconsolata-expanded">
                <!-- TEST COMMENT -->
                <p class="black-text product-title">{{ product.title | escape | link_to: product.url }}</p>
                <p style="text-decoration:none;margin-bottom:0;"><s>{{ product.compare_at_price | money }}</s> {{ product.price | money }}</p>
              </div>
              <form id="collection-product">
              <input type="hidden" id="variant-id" name="id" value="{{ product.variants.first.id }}" />
                          <input
            id="add-to-cart-button"
            onClick="addToCartCollection({{ product.variants.first.id }})"
            class="ATCBtn bg-dark mt-4"
            value="Add to cart"
data-bs-toggle="modal" data-bs-target="#exampleModalCenter"          >
              <!--<button type="submit" class="ATCBtn bg-dark inconsolata-expanded">Add to Cart</button>-->
              <!--<button type="submit">Add to Cart</button> -->
              </form>
            </div>
          </div>
        {% endfor %}

        {{ paginate | default_pagination }}
      </div>
    {% endpaginate %}
  </div>
</div>

  </div>
</div>
{% stylesheet %}
    .product-listing{
    /*border: 1px solid black; */
     margin-bottom:3px;

    }
    .active-filters__remove-filter{

      display:inline-block;
      text-decoration:none;
      color:white;
  padding: 10px;
    border-radius: 10px;
      margin-bottom:3px;
    }
{% endstylesheet %}

<script>

  function addToCartCollection(id){


        const productId = id;
        const quantity = 1;

                const data = {
            id: productId,
            quantity: quantity
        };

        console.log(data)
        fetch('/cart/add.js', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
           // alert('Product added to cart!');
            updateCartCount();
                  fetchCartItems();

        })
        .catch(error => {
            alert('There was an error adding the product to the cart: ' + error.message);
        });
  }


  
  Shopify.queryParams = {};
if(location.search.length) {
  for(var aKeyValue, i = 0, aCouples = location.search.substr(1).split('&'); i < aCouples.length; i++) {
    aKeyValue = aCouples[i].split('=');
    if (aKeyValue.length > 1) {
      Shopify.queryParams[decodeURIComponent(aKeyValue[0])] = decodeURIComponent(aKeyValue[1]);
    }
  }
}

// Add existing sort parameters to current URL
  var value;
document.querySelector('.sort-by').addEventListener('change', function(e) {
  value = e.currentTarget.value;
  Shopify.queryParams.sort_by = value;
  console.log(Shopify.queryParams)
  document.getElementById("main-apply-filter-btn").click();

});

  
  const checkboxes = document.querySelectorAll('input[type="checkbox"]');
  checkboxes.forEach(checkbox => {
      checkbox.onclick = function(event) {
      document.getElementById("main-apply-filter-btn").click();
      };
  });

  document.getElementById('filter-form').addEventListener('submit', function(event) {
    event.preventDefault(); // Prevent the default form submission

    const formData = new FormData(this);
    const queryString = new URLSearchParams(formData).toString();

    const filterForm = document.getElementById('filter-form');
    const checkedBoxes = filterForm.querySelectorAll('input[type=checkbox]:checked');
    let activeFilters = []
    let nodeIds = []

    for (let i = 0; i < checkedBoxes.length; i++){
      let activeFilter = checkedBoxes[i].nextSibling.textContent.trim();
      let nodeID = checkedBoxes[i].id;
      activeFilters.push(activeFilter);
      nodeIds.push(nodeID)
    }
    console.log("/collections/{{ collection.title }}?view=ajax&" + queryString)

    fetch(`/collections/{{ collection.title }}?sort_by=${value}&view=ajax&${queryString}`)
      .then(response => response.text())
      .then(data => {
        // Update the filtered results section with the new content
        document.getElementById('filtered-results').innerHTML = data;
        clearActiveFilters();
        updateActiveFilters(activeFilters,nodeIds);

       // document.getElementById('active-filters').appendChild(activeFilterAnchor);
      })
      .catch(error => console.error('Error:', error));
  });
  function updateActiveFilters(aF,ids){

    for (let i = 0; i < aF.length; i++){
        document.getElementById('active-filters').innerHTML += '<a class="active-filters__remove-filter bg-dark" onclick="removeFilter(\'' + ids[i] + '\');this.remove();" id="toggle-filter">'+ aF[i] + '</a>';
    }
    
  }
  function clearActiveFilters(){
    document.getElementById('active-filters').innerHTML = "";
  }

  function removeFilter(id){

    document.getElementById(id).checked = false;
    console.log("submit form");
    document.getElementById("main-apply-filter-btn").click();
    //form.submit();
    
  }
  function clearAll(){
        const filterForm = document.getElementById('filter-form');
    const checkedBoxes = filterForm.querySelectorAll('input[type=checkbox]:checked');
    for (let i = 0; i < checkedBoxes.length; i++){
      checkedBoxes[i].checked = false;
    }
    document.getElementById("main-apply-filter-btn").click();
  }
document.getElementById('toggle-filter').addEventListener('click', function(event) {
    event.preventDefault(); // Prevent the default anchor behavior

    console.log(event)
    // Get the form element
    var form = document.getElementById('myForm');

    // Submit the form
    form.submit();
});
  window.onload = function() {
        document.getElementById("main-apply-filter-btn").click();
};
</script>

{% schema %}
{
  "name": "t:general.collection",
  "settings": []
}
{% endschema %}
