{% doc %}
  @prompt
    Make a carousel of all of my collections. Make sure that all of my collections are displayed, Make the header the same font as the previous block

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-collections-carousel-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    overflow: hidden;
    background-color: {{ block.settings.background_color }};
    padding: {{ block.settings.section_padding }}px 0;
  }

  .ai-collections-carousel__container-{{ ai_gen_id }} {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .ai-collections-carousel__header-{{ ai_gen_id }} {
    text-align: center;
    margin-bottom: 40px;
  }

  .ai-collections-carousel__title-{{ ai_gen_id }} {
    font-family: {{ block.settings.heading_font.family }}, {{ block.settings.heading_font.fallback_families }};
    font-weight: {{ block.settings.heading_font.weight }};
    font-style: {{ block.settings.heading_font.style }};
    font-size: {{ block.settings.title_size }}px;
    color: {{ block.settings.text_color }};
    margin: 0 0 10px;
  }

  .ai-collections-carousel__subtitle-{{ ai_gen_id }} {
    font-family: {{ block.settings.heading_font.family }}, {{ block.settings.heading_font.fallback_families }};
    font-weight: {{ block.settings.heading_font.weight }};
    font-style: {{ block.settings.heading_font.style }};
    font-size: {{ block.settings.subtitle_size }}px;
    color: {{ block.settings.text_color }};
    opacity: 0.8;
    margin: 0;
  }

  .ai-collections-carousel__wrapper-{{ ai_gen_id }} {
    position: relative;
    overflow: hidden;
    border-radius: {{ block.settings.border_radius }}px;
  }

  .ai-collections-carousel__track-{{ ai_gen_id }} {
    display: flex;
    transition: transform 0.5s ease;
    gap: {{ block.settings.gap }}px;
  }

  .ai-collections-carousel__slide-{{ ai_gen_id }} {
    flex: 0 0 auto;
    width: calc((100% - {{ block.settings.gap | times: block.settings.slides_per_view | minus: 1 }}px) / {{ block.settings.slides_per_view }});
    position: relative;
    border-radius: {{ block.settings.card_border_radius }}px;
    overflow: hidden;
    background-color: {{ block.settings.card_background_color }};box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .ai-collections-carousel__slide-{{ ai_gen_id }}:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .ai-collections-carousel__image-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: {{ block.settings.image_height }}px;
    overflow: hidden;
  }

  .ai-collections-carousel__image-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .ai-collections-carousel__slide-{{ ai_gen_id }}:hover .ai-collections-carousel__image-{{ ai_gen_id }} {
    transform: scale(1.05);
  }

  .ai-collections-carousel__image-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .ai-collections-carousel__image-placeholder-{{ ai_gen_id }} svg {
    width: 60%;
    height: 60%;opacity: 0.3;
  }

  .ai-collections-carousel__overlay-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(to bottom, transparent0%, rgba(0, 0, 0, 0.7) 100%);
    display: flex;
    align-items: flex-end;
    padding: 20px;
  }

  .ai-collections-carousel__content-{{ ai_gen_id }} {
    color: white;
    text-align: left;
    width: 100%;
  }

  .ai-collections-carousel__collection-title-{{ ai_gen_id }} {
    font-size: {{ block.settings.collection_title_size }}px;
    font-weight: 600;
    margin: 0 0 5px;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
  }

  .ai-collections-carousel__collection-count-{{ ai_gen_id }} {
    font-size: {{ block.settings.collection_count_size }}px;
    opacity: 0.9;
    margin: 0;text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
  }

  .ai-collections-carousel__link-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 2;
  }

  .ai-collections-carousel__nav-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: {{ block.settings.nav_button_color }};
    color: {{ block.settings.nav_button_text_color }};
    border: none;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transition: all 0.3s ease;
    z-index: 3;
  }

  .ai-collections-carousel__nav-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.nav_button_hover_color }};
    transform: translateY(-50%) scale(1.1);
  }

  .ai-collections-carousel__nav-{{ ai_gen_id }}:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: translateY(-50%) scale(1);
  }

  .ai-collections-carousel__nav--prev-{{ ai_gen_id }} {
    left: -25px;
  }

  .ai-collections-carousel__nav--next-{{ ai_gen_id }} {
    right: -25px;
  }

  .ai-collections-carousel__dots-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    gap: 8px;
    margin-top: 30px;
  }

  .ai-collections-carousel__dot-{{ ai_gen_id }} {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background-color: {{ block.settings.dot_color }};
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
    opacity: 0.5;
  }

  .ai-collections-carousel__dot-{{ ai_gen_id }}.active {
    background-color: {{ block.settings.dot_active_color }};
    opacity: 1;
    transform: scale(1.2);
  }

  .ai-collections-carousel__empty-state-{{ ai_gen_id }} {
    text-align: center;
    padding: 60px 20px;
    color: {{ block.settings.text_color }};
    opacity: 0.7;
  }

  @media screen and (max-width: 768px) {
    .ai-collections-carousel__slide-{{ ai_gen_id }} {
      width: calc((100% - {{ block.settings.gap | times: block.settings.slides_per_view_mobile | minus: 1 }}px) / {{ block.settings.slides_per_view_mobile }});
    }

    .ai-collections-carousel__nav-{{ ai_gen_id }} {
      width: 40px;
      height: 40px;
    }

    .ai-collections-carousel__nav--prev-{{ ai_gen_id }} {
      left: -20px;
    }

    .ai-collections-carousel__nav--next-{{ ai_gen_id }} {
      right: -20px;
    }

    .ai-collections-carousel__overlay-{{ ai_gen_id }} {
      padding: 15px;
    }
  }
{% endstyle %}<collections-carousel-{{ ai_gen_id }}
  class="container ai-collections-carousel-{{ ai_gen_id }}"
  data-autoplay="{{ block.settings.autoplay }}"
  data-autoplay-speed="{{ block.settings.autoplay_speed }}"
  style="grid-column: unset !important;"
  {{ block.shopify_attributes }}
>
  <div class="ai-collections-carousel__container-{{ ai_gen_id }}">
    {% if block.settings.title != blank or block.settings.subtitle != blank %}
      <div class="ai-collections-carousel__header-{{ ai_gen_id }}">
        {% if block.settings.title != blank %}
          <h2 class="ai-collections-carousel__title-{{ ai_gen_id }}">{{ block.settings.title }}</h2>
        {% endif %}
        {% if block.settings.subtitle != blank %}
          <p class="ai-collections-carousel__subtitle-{{ ai_gen_id }}">{{ block.settings.subtitle }}</p>
        {% endif %}
      </div>
    {% endif %}

    {% if collections.size > 0 %}
      <div class="ai-collections-carousel__wrapper-{{ ai_gen_id }}">
        <div class="ai-collections-carousel__track-{{ ai_gen_id }}">
          {% for collection in collections %}
            <div class="ai-collections-carousel__slide-{{ ai_gen_id }}">
              <div class="ai-collections-carousel__image-wrapper-{{ ai_gen_id }}">
                {% if collection.featured_image %}
                  <img
                    src="{{ collection.featured_image | image_url: width: 600}}"
                    alt="{{ collection.featured_image.alt | escape }}"
                    class="ai-collections-carousel__image-{{ ai_gen_id }}"loading="lazy"
                    width="600"
                    height="{{ block.settings.image_height }}"
                  >
                {% else %}
                  <div class="ai-collections-carousel__image-placeholder-{{ ai_gen_id }}">
                    {{ 'collection-1' | placeholder_svg_tag }}
                  </div>
                {% endif %}
                <div class="ai-collections-carousel__overlay-{{ ai_gen_id }}">
                  <div class="ai-collections-carousel__content-{{ ai_gen_id }}">
                    <h3 class="ai-collections-carousel__collection-title-{{ ai_gen_id }}">
                      {{ collection.title }}
                    </h3>
                    {% if block.settings.show_product_count %}
                      <p class="ai-collections-carousel__collection-count-{{ ai_gen_id }}">
                        {{ collection.products_count }} 
                        {% if collection.products_count == 1 %}
                          product
                        {% else %}
                          products
                        {% endif %}
                      </p>
                    {% endif %}
                  </div>
                </div><a 
                  href="{{ collection.url }}"
                  class="ai-collections-carousel__link-{{ ai_gen_id }}"
                  aria-label="View {{ collection.title }} collection"
                ></a>
              </div>
            </div>
          {% endfor %}
        </div>

        {% if block.settings.show_navigation %}
          <button
            class="ai-collections-carousel__nav-{{ ai_gen_id }} ai-collections-carousel__nav--prev-{{ ai_gen_id }}"
            aria-label="Previous collections"
          >
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="15,18 9,12 15,6"></polyline>
            </svg>
          </button>
          
          <button 
            class="ai-collections-carousel__nav-{{ ai_gen_id }} ai-collections-carousel__nav--next-{{ ai_gen_id }}"
            aria-label="Next collections"
          >
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="9,18 15,12 9,6"></polyline>
            </svg>
          </button>
        {% endif %}
      </div>

      {% if block.settings.show_dots %}
        <div class="ai-collections-carousel__dots-{{ ai_gen_id }}"></div>
      {% endif %}
    {% else %}
      <div class="ai-collections-carousel__empty-state-{{ ai_gen_id }}">
        <h3>No collections found</h3>
        <p>Create some collections to display them in this carousel.</p>
      </div>
    {% endif %}
  </div>
</collections-carousel-{{ ai_gen_id }}>

<script>
(function() {
  class CollectionsCarousel{{ ai_gen_id }} extends HTMLElement {
    constructor() {
      super();
      this.currentSlide = 0;
      this.autoplayTimer = null;
    }

    connectedCallback() {
      this.track = this.querySelector('.ai-collections-carousel__track-{{ ai_gen_id }}');
      this.slides = this.querySelectorAll('.ai-collections-carousel__slide-{{ ai_gen_id }}');
      this.prevBtn = this.querySelector('.ai-collections-carousel__nav--prev-{{ ai_gen_id }}');
      this.nextBtn = this.querySelector('.ai-collections-carousel__nav--next-{{ ai_gen_id }}');
      this.dotsContainer = this.querySelector('.ai-collections-carousel__dots-{{ ai_gen_id }}');

      if (!this.track || this.slides.length === 0) return;

      this.slidesPerView = this.getSlidesPerView();
      this.maxSlides = Math.max(0, this.slides.length - this.slidesPerView);

      this.setupEventListeners();
      this.createDots();
      this.updateCarousel();
      this.setupAutoplay();

      window.addEventListener('resize', () => {
        this.slidesPerView = this.getSlidesPerView();
        this.maxSlides = Math.max(0, this.slides.length - this.slidesPerView);
        this.currentSlide = Math.min(this.currentSlide, this.maxSlides);
        this.updateCarousel();
      });
    }

    getSlidesPerView() {
      return window.innerWidth <= 768 ? {{ block.settings.slides_per_view_mobile }} : {{ block.settings.slides_per_view }};
    }

    setupEventListeners() {
      if (this.prevBtn) {
        this.prevBtn.addEventListener('click', () => this.prevSlide());
      }
      if (this.nextBtn) {
        this.nextBtn.addEventListener('click', () => this.nextSlide());
      }
    }

    createDots() {
      if (!this.dotsContainer) return;

      this.dotsContainer.innerHTML = '';
      const totalDots = this.maxSlides + 1;

      for (let i = 0; i < totalDots; i++) {
        const dot = document.createElement('button');
        dot.className = 'ai-collections-carousel__dot-{{ ai_gen_id }}';
        dot.setAttribute('aria-label', `Go to slide ${i + 1}`);
        dot.addEventListener('click', () => this.goToSlide(i));
        this.dotsContainer.appendChild(dot);
      }
    }

    updateCarousel() {
      if (!this.track) return;

      const slideWidth = this.slides[0].offsetWidth;
      const gap = {{ block.settings.gap }};
      const translateX = -(this.currentSlide * (slideWidth + gap));
      this.track.style.transform = `translateX(${translateX}px)`;

      if (this.prevBtn) {
        this.prevBtn.disabled = this.currentSlide === 0;
      }
      if (this.nextBtn) {
        this.nextBtn.disabled = this.currentSlide >= this.maxSlides;
      }

      this.updateDots();
    }

    updateDots() {
      const dots = this.querySelectorAll('.ai-collections-carousel__dot-{{ ai_gen_id }}');
      dots.forEach((dot, index) => {
        dot.classList.toggle('active', index === this.currentSlide);
      });
    }

    prevSlide() {
      if (this.currentSlide > 0) {
        this.currentSlide--;
        this.updateCarousel();
        this.resetAutoplay();
      }
    }

    nextSlide() {
      if (this.currentSlide < this.maxSlides) {
        this.currentSlide++;
        this.updateCarousel();
        this.resetAutoplay();
      } else if (this.dataset.autoplay === 'true') {
        this.currentSlide = 0;
        this.updateCarousel();
      }
    }

    goToSlide(index) {
      this.currentSlide = Math.max(0, Math.min(index, this.maxSlides));
      this.updateCarousel();
      this.resetAutoplay();
    }

    setupAutoplay() {
      if (this.dataset.autoplay === 'true' && this.slides.length > this.slidesPerView) {
        this.startAutoplay();
      }
    }

    startAutoplay() {
      this.autoplayTimer = setInterval(() => {
        this.nextSlide();
      }, parseInt(this.dataset.autoplaySpeed));
    }

    resetAutoplay() {
      if (this.autoplayTimer) {
        clearInterval(this.autoplayTimer);
        if (this.dataset.autoplay === 'true') {
          this.startAutoplay();
        }
      }
    }

    disconnectedCallback() {
      if (this.autoplayTimer) {
        clearInterval(this.autoplayTimer);
      }
    }
  }

  customElements.define('collections-carousel-{{ ai_gen_id }}', CollectionsCarousel{{ ai_gen_id }});
})();
</script>

{% schema %}
{
  "name": "Collections carousel",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Shop by Collection"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Subtitle",
      "default": "Discover our curated collections"
    },
    {
      "type": "checkbox",
      "id": "show_product_count",
      "label": "Show product count",
      "default": true
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "slides_per_view",
      "min": 1,
      "max": 6,
      "step": 1,
      "label": "Slides per view (desktop)",
      "default": 3
    },
    {
      "type": "range",
      "id": "slides_per_view_mobile",
      "min": 1,
      "max": 3,
      "step": 1,
      "label": "Slides per view (mobile)",
      "default": 1
    },
    {
      "type": "range",
      "id": "gap",
      "min": 0,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Gap between slides",
      "default": 20
    },
    {
      "type": "range",
      "id": "image_height",
      "min": 200,
      "max": 500,
      "step": 20,
      "unit": "px",
      "label": "Image height",
      "default": 300
    },
    {
      "type": "header",
      "content": "Navigation"
    },
    {
      "type": "checkbox",
      "id": "show_navigation",
      "label": "Show navigation arrows",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_dots",
      "label": "Show dots",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Autoplay",
      "default": false
    },
    {
      "type": "range",
      "id": "autoplay_speed",
      "min": 2000,
      "max": 8000,
      "step": 500,
      "unit": "ms",
      "label": "Autoplay speed",
      "default": 4000
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "card_background_color",
      "label": "Card background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "nav_button_color",
      "label": "Navigation button color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "nav_button_text_color",
      "label": "Navigation button text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "nav_button_hover_color",
      "label": "Navigation button hover color",
      "default": "#f0f0f0"
    },
    {
      "type": "color",
      "id": "dot_color",
      "label": "Dot color",
      "default": "#cccccc"
    },
    {
      "type": "color",
      "id": "dot_active_color",
      "label": "Active dot color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "font_picker",
      "id": "heading_font",
      "label": "Heading font",
      "default": "helvetica_n4"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 16,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 32
    },
    {
      "type": "range",
      "id": "subtitle_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Subtitle size",
      "default": 16
    },
    {
      "type": "range",
      "id": "collection_title_size",
      "min": 14,
      "max": 28,
      "step": 1,
      "unit": "px",
      "label": "Collection title size",
      "default": 20
    },
    {
      "type": "range",
      "id": "collection_count_size",
      "min": 12,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Product count size",
      "default": 14
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Section padding",
      "default": 50
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Container border radius",
      "default": 12
    },
    {
      "type": "range",
      "id": "card_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Card border radius",
      "default": 8
    }
  ],
  "presets": [
    {
      "name": "Collections carousel"
    }
  ]
}
{% endschema %}
